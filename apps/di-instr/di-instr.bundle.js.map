{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/database.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/localStorageDB.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/firestoreDB.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/snackbar/index.js","webpack:///./src/di-instruction-scene.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/scene-app-base/scene.js","webpack:///./src/di-stats-scene.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/scene-app-base/radio-button-form.js","webpack:///./src/di-mult-choice-form-scene.js","webpack:///./src/index.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/activity-config/index.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/navbar/index.js","webpack:///./src/di-instruction-app.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/scene-app-base/app.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","STUDY3","conditionActivities","1","2","Database","dbType","this","userID","formData","activityKey","decodeJSON","varName","super","classCode","setCredentials","console","count","data","Promise","all","getTextValue","getActivityData","getCurrHypoTask","getIntialHypoData","getFinalHypoData","then","ccRes","uidRes","rqRes","chtRes","ihRes","fhRes","rqted","currHypoTaskIdx","firstPrediction","initialHypo","secondPrediction","finalHypo","getJSONValue","JSON","stringify","saveJSONValue","retVal","moduleState","selectedArea","index","selectedTopic","selectedVariable","selectedRQ","catch","err","error","getIntValue","pred1","initHypo","pred2","overwrite","resolve","reject","items","localStorage","setItem","getItem","undefined","parseInt","parseFloat","parse","firebaseConfig","apiKey","authDomain","projectId","firebase","initializeApp","store","firestore","userRef","collection","doc","update","usernum","FieldValue","increment","docRef","exists","getUserData","where","FN","LN","MON","DAY","snapshot","size","log","docs","getNextUserNum","userNum","conditionNum","conditionStr","activityList","assign","condition","assignments","completedAssignments","set","userData","activityId","includes","push","state","activityState","merge","delete","SnackBar","eleID","el","document","getElementById","text","innerHTML","classList","add","setTimeout","remove","app","sceneInfo","debug","id","k","v","entries","handleFollowEdgeButton","btnNames","btnName","show","hide","e","preventDefault","edgeName","target","dataset","edge","followEdge","getElementsByClassName","getFollowEdgeElements","addEventListener","once","sceneType","_isBogus","currentScene","defaultEnterSceneActions","customEnterActions","length","performCustomEnterSceneActions","defaultExitSceneActions","customExitActions","performCustomExitSceneActions","resizeContent","setupFollowEdgeEventHandlers","warn","customActions","showBtns","hideBtns","hiliteTableCells","hilightTableCells","prev","prevBtn","next","nextBtn","backToQuestion","backToQuestionBtn","readyToAnswer","readyToAnswerBtn","args","tableId","table","color","selector","cellSelectors","sel","querySelector","action","enable","RadioButtonForm","formInfo","eleId","handleChange","form","radios","querySelectorAll","changed","checkValidity","isValid","rb","removeEventListener","isCorrect","sfi","val","trim","correctAnswer","fbText","fbClassName","fbMsg","getCorrectness","posFb","negFb","ntlFb","selectedAnswer","lbl","labels","innerText","questionType","type","questionText","selectedEleId","selectedValue","selectedLabel","timestamp","Date","now","question","restoreState","checked","formChanged","saveFormData","handlePrevButton","handleNextButton","showFeedback","getFeedback","getData","logData","action_type","questionId","events","sceneState","setupEventHandlers","teardownEventHandlers","disable","currentActivity","activityConfig","database","homepage","activityID","activityFeatures","features","split","filter","item","getActivityConfiguration","activityData","homeBtn","activityTitle","glossaryBtn","glossaryPopup","signOutBtn","signInText","goHome","toggleGlossary","signOutUser","homePage","calcHomePage","redirectTo","toggle","window","location","origin","url","allowRefresh","href","reload","clear","title","toUpperCase","userName","displayActivityTitle","displayUser","appData","defaultInitialState","sceneData","scenes","db","schema","getDBConnection","defaultState","snackbar","homePageBtn","sceneIdRegion","handleGoHomePage","handleNext","handlePrev","handleResize","startScene","prevScene","bogusSceneInfo","event","sEl","cEl","sWidth","sHeight","cWidth","cHeight","sc","offsetWidth","offsetHeight","Math","min","style","transform","feedback","markActivityAsCompleted","top","saveAppState","sceneId","getAppState","section","sceneObj","createScene","lookupScene","gotoStartScene","setActivityData","Scene","scene","logSceneChange","gotoScene","pre_exit","exit","post_exit","pre_enter","enter","post_enter","displaySceneId","newSceneId","edges","newScene","switchToScene","from","to","handleBackToQuestion","handleReadyToAnswer","start"],"mappings":"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","file":"di-instr.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","\nexport const STUDY3 = {\n    conditionActivities: {\n        1: [\n            \"matsPreTest\",\n            \"diPreTest\",\n            \"reSelectBL\",\n            \"hypoWEoneDir\",\n            \"diInstrGR\",\n            \"diCrystalGrowthTest\",\n            \"diPostTest\",\n            \"matsPostTest\"\n        ],\n        2: [\n            \"matsPreTest\",\n            \"diPreTest\",\n            \"reSelectBL\",\n            \"hypoWEbiDir\",\n            \"diInstrGR\",\n            \"diCrystalGrowthTest\",\n            \"diPostTest\",\n            \"matsPostTest\"\n        ]\n    }\n};\n\n// abstract class - interface\nexport class Database {\n    constructor(dbType) {\n        this.dbType = dbType;\n    }\n\n    setCredentials(userID) {\n        this.userID = userID;\n    }\n\n    lookupUserID(formData) {\n\n    }\n\n    loginUser(userID) {\n\n    }\n\n    registerUser(formData) {\n\n    }\n\n    getUserData() {\n\n    }\n\n    getActivityData(activityKey, decodeJSON = true) {\n\n    }\n\n    setActivityData(activityKey, object) {\n\n    }\n\n    getRQData() {\n\n    }\n\n    getCurrHypoTask() {\n\n    }\n\n    getInitialHypoData() {\n\n    }\n\n    getFinalHypoData() {\n\n    }\n\n    saveValue(varName, value) {\n\n    }\n\n    saveJSONValue(varName, object) {\n\n    }\n\n    getBoolValue(varName) {\n\n    }\n\n    getIntValue(varName) {\n\n    }\n\n    getFloatValue(varName) {\n\n    }\n\n    getTextValue(varName) {\n\n    }\n\n    getJSONValue(varName) {\n\n    }\n\n};\n\n\n","\nimport { Database } from \"./database\";\n\n// NOTE: this API must use promises to be compatible with any db\n// we may be using, which may be either sync or async\nexport class LocalStorageDB extends Database {\n\n    constructor() {\n        super();\n    }\n\n    setCredentials(classCode, userID) {\n        super.setCredentials(classCode, userID);\n        // return Promise.all([\n        // this.saveValue(\"classCode\", classCode),\n        // this.saveValue(\"userID\", userID),\n        // ]).then(([result1, result2]) => { });\n    }\n\n    getUserData() {\n        console.count(\"getUserData() called\");\n        let data = {};\n        return Promise.all([\n            this.getTextValue(\"classCode\"),\n            this.getTextValue(\"userID\"),\n            this.getActivityData(\"rqted\"),\n            this.getCurrHypoTask(),\n            this.getIntialHypoData(),\n            this.getFinalHypoData()\n        ]).then(([ccRes, uidRes, rqRes, chtRes, ihRes, fhRes]) => {\n            data.classCode = ccRes;\n            data.userID = uidRes;\n            data.rqted = rqRes;\n            if (chtRes) {\n                data.currHypoTaskIdx = chtRes\n            }\n            if (ihRes) {\n                data.firstPrediction = ihRes.firstPrediction;\n                data.initialHypo = ihRes.initialHypo;\n            }\n            if (fhRes) {\n                data.secondPrediction = fhRes.secondPrediction;\n                data.finalHypo = fhRes.finalHypo;\n            }\n            return data;\n        });\n    }\n\n    getActivityData(activityKey, decodeJSON = true) {\n        return this.getJSONValue(activityKey)\n        .then((data) => {\n            if (data && !decodeJSON) {\n                return JSON.stringify(data);\n            } else {\n                return data;\n            }\n        });\n    }\n\n    setActivityData(activityKey, object) {\n        return this.saveJSONValue(activityKey, object);\n    }\n\n    getRQData() {\n        let retVal = null;\n        return this.getActivityData(\"rqted\")\n        .then((rqted) => {\n            // console.log(rqted);\n            if (rqted) {\n                retVal = rqted;\n            } else {\n                // if the rq isn't selected hard-code to crystal growth\n                retVal = {\n                    moduleState: {\n                        selectedArea: { index: 1 },\n                        selectedTopic: { index: 1 },\n                        selectedVariable: { index: 1 },\n                        selectedRQ: { index: 1 }\n                    }\n                };\n            }\n            // console.log(retVal);\n            return retVal;\n        })\n        .catch((err) => {\n            console.error(err);\n            return retVal;\n        });\n    }\n\n    getCurrHypoTask() {\n        return this.getIntValue(\"currHypoTaskIdx\")\n    }\n\n    getIntialHypoData() {\n        let data = {};\n        return this.getTextValue(\"firstPrediction\")\n            .then((pred1) => {\n                // console.log(`getInitialHypoData():firstPrediction ${pred1}`);\n                if (null !== pred1) {\n                    data.firstPrediction = pred1;\n                    return this.getJSONValue(\"initialHypo\");\n                } else {\n                    data.firstPrediction = null;\n                    return null;\n                }\n            })\n            .then((initHypo) => {\n                // console.log(`getInitialHypoData():initHypo ${initHypo}`);\n                data.initialHypo = initHypo;\n                return data;\n            })\n            .catch((err) => {\n                console.error(err);\n                return data;\n            });\n    }\n\n    getFinalHypoData() {\n        let data = {};\n        return this.getTextValue(\"secondPrediction\")\n            .then((pred2) => {\n                // console.log(`getFinalHypoData():secondPrediction ${pred2}`)\n                if (null !== pred2) {\n                    data.secondPrediction = pred2;\n                    return this.getJSONValue(\"finalHypo\");\n                } else {\n                    data.secondPrediction = null;\n                    return null\n                }\n            })\n            .then((finalHypo) => {\n                // console.log(`getFinalHypoData():finalHypo ${finalHypo}`);\n                data.finalHypo = finalHypo;\n                return data;\n            })\n            .catch((err) => {\n                console.error(err);\n                return data;\n            });\n    }\n\n    setValues(object, overwrite=false) {\n        // overwrite param is ignored, as it is specific to firestore\n        return new Promise((resolve, reject) => {\n            try {\n                for (let [key, value] of Object.items(object)) {\n                    localStorage.setItem(key, value);\n                }\n                resolve(true);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    saveValue(varName, value) {\n        return new Promise((resolve, reject) => {\n            try {\n                resolve(localStorage.setItem(varName, value));\n            } catch(err) {\n                reject(err);\n            }\n        })\n    }\n\n    saveJSONValue(varName, object) {\n        return new Promise((resolve, reject) => {\n            try {\n                let value = JSON.stringify(object);\n                resolve(localStorage.setItem(varName, value));\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getBoolValue(varName) {\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (undefined === value) {\n                    resolve(value);\n                }\n                if (\"true\" === value) {\n                    resolve(true);\n                } else {\n                    resolve(false);\n                }\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getIntValue(varName) {\n        let retVal;\n        return new Promise((resolve, reject) => {\n            try {\n               let value = localStorage.getItem(varName);\n                if (value) {\n                    retVal = parseInt(value, 10);\n                }\n                resolve(retVal);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getFloatValue(varName) {\n        let retVal;\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (value) {\n                    retVal = parseFloat(value);\n                }\n                resolve(retVal);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getTextValue(varName) {\n        let retVal;\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (value) {\n                    retVal = value;\n                }\n                resolve(value);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    };\n\n    getJSONValue(varName) {\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (value) {\n                    value = JSON.parse(value);\n                }\n                resolve(value);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n};\n\n// let db = new Database(\"BOGUS_CLASS\", \"BOGUS_STUDENT\");\n\n","import { STUDY3, Database } from \"./database\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyD7zIk-8V20QqJNSs0cAV0uNL3qjeqLMdM\",\n    authDomain: \"isptutor.firebaseapp.com\",\n    projectId: \"isptutor\"\n};\n\nexport class FirestoreDB extends Database {\n\n    constructor() {\n        super(\"firestore\");\n        firebase.initializeApp(firebaseConfig);\n        this.store = firebase.firestore();\n    }\n\n    setCredentials(userID) {\n        super.setCredentials(userID);\n        this.userRef = this.store.collection(\"STUDY_3\").doc(userID);\n    }\n\n    getNextUserNum() {\n        return this.store.collection(\"STUDY_3\").doc(\"study_data\").update({\n            usernum: firebase.firestore.FieldValue.increment(1)\n        }).then(() => this.store.collection(\"STUDY_3\").doc(\"study_data\").get())\n        .then((doc) => {\n            return doc.data().usernum;\n        })\n        .catch((error) => console.error(error));\n    }\n\n    // loginUser(classCode, userID) {\n    //     let retVal;\n    //     return this.store.collection(\"STUDY_3\")\n    //         .where(\"classCode\", \"==\", classCode)\n    //         .where(\"userID\", \"==\", userID)\n    //         .get()\n    //         .then((snapshot) => {\n    //             if (1 !== snapshot.size) {\n    //                 return false;\n    //             }\n    //             this.userRef = snapshot.docs[0];\n    //             return true;\n    //         })\n    // }\n\n    loginUser(userID) {\n        let docRef = this.store.collection(\"STUDY_3\").doc(userID);\n        return docRef.get()\n        .then((doc) => {\n            if (!doc.exists) {\n                return false;\n            } else {\n                this.userRef = docRef;\n                return this.getUserData()\n            }\n        });\n    }\n\n    lookupUserID(formData) {\n        // returns userID (truthy) or false\n        return this.store.collection(\"STUDY_3\")\n            .where(\"classCode\", \"==\", formData.classCode)\n            .where(\"FN\",        \"==\", formData.FN)\n            .where(\"LN\",        \"==\", formData.LN)\n            .where(\"MON\",       \"==\", formData.MON)\n            .where(\"DAY\",       \"==\", formData.DAY)\n            .get()\n            .then((snapshot) => {\n                // console.log(snapshot);\n                if (1 !== snapshot.size) {\n                    return false;\n                } else {\n                    console.log('record found');\n                    let userID = false;\n                    let data = snapshot.docs[0].data();\n                    if (data.userID) {\n                        userID = data.userID;\n                    } else {\n                        console.log(\"no userID field\", data);\n                    }\n                    return userID;\n                }\n            })\n            .catch((error) => {\n                console.log(error);\n                return false;\n            });\n    }\n\n    registerUser(formData) {\n        let userID = false;\n        console.log('registering user');\n        return this.getNextUserNum()\n        .then((userNum) => {\n            // if even cond1 if odd cond2\n            let conditionNum = (userNum % 2) + 1;\n            let conditionStr = `${conditionNum}`;\n            userID = `USER${userNum}_${conditionNum}`;\n            let activityList = STUDY3.conditionActivities[conditionStr];\n            let data = Object.assign(formData, {\n                userID: userID,\n                condition: conditionStr,\n                assignments: JSON.stringify(activityList),\n                completedAssignments: JSON.stringify([])\n            })\n            return this.store.collection(\"STUDY_3\").doc(userID).set(data)\n        })\n        .then(() => {\n            return userID;\n        })\n        .catch((error) => {\n            console.error(error);\n            return false;\n        })\n    }\n\n    getUserData() {\n        // returns promise with 'doc' if it exists, false otherwise\n        let userData = false;\n        return this.userRef.get()\n        .then((doc) => {\n            if (doc.exists) {\n                let data = doc.data();\n                userData = {\n                    userID: data.userID,\n                    condition: data.condition,\n                    assignments: JSON.parse(data.assignments),\n                    completedAssignments: JSON.parse(data.completedAssignments)\n                }\n            }\n            return userData;\n        });\n    }\n\n    markActivityAsCompleted(activityId) {\n        // console.log(`markActivityAsCompleted(${activityId})`);\n        return this.userRef.get()\n        .then((doc) => {\n            let data = doc.data();\n            return JSON.parse(data.completedAssignments)\n        })\n        .then((completedAssignments) => {\n            // console.log(\"BEFORE:\", completedAssignments);\n            if (!completedAssignments.includes(activityId)) {\n                completedAssignments.push(activityId);\n            }\n            // console.log(\"AFTER\", completedAssignments)\n            return this.userRef.update({\n                completedAssignments: JSON.stringify(completedAssignments)\n            });\n        });\n    }\n\n    getCurrHypoTask() {\n\n    }\n\n    getActivityData(activityKey, decodeJSON=true) {\n        return this.userRef.get()\n        .then((doc) => doc.data())\n        .then((userData) => {\n            console.log(\"userData\", userData);\n            if (!userData) {\n                return null;\n            }\n            let data = userData[activityKey];\n            if (!data) {\n                return null;\n            }\n            if (data && decodeJSON) {\n                return JSON.parse(data);\n            } else {\n                return data;\n            }\n        }).catch((error) => {\n            console.error(error);\n            return null;\n        });\n    }\n\n    setActivityData(activityKey, state) {\n        let activityState = JSON.stringify(state);\n        return this.userRef.update({\n            [activityKey]: activityState\n        })\n        .then(() => {\n            console.log(\"app data saved successefully\")\n        }).catch((error) => {\n            console.error(error);\n        });\n    }\n    // getRQData() {\n    //     return this.getAppData(\"rqted\");\n    // }\n\n\n    // getInitialHypoData() {\n    //     return this.getAppData(\"initialHypo\")\n    //     .then((strData))\n    // }\n\n    // getFinalHypoData() {\n    //     return this.getAppData(\"finalHypo\")\n    // }\n\n    setValues(object, overwrite=false) {\n        // default to {merge: true} option for safety\n        return this.userRef.set(object, {merge: !overwrite});\n    }\n\n    updateValues(object) {\n        return this.userRef.update(object);\n    }\n\n    deleteValue(varName) {\n        return this.userRef.update({\n            [varName]: firebase.firestore.FieldValue.delete()\n        });\n    }\n\n    // saveJSONValue(varName, value) {\n    //     return this.userRef.set({\n    //         [varName]: JSON.stringify(value)\n    //     });\n    // }\n\n    // getBoolValue(varName) {\n\n    // }\n\n    // getIntValue(varName) {\n\n    // }\n\n    // getFloatValue(varName) {\n\n    // }\n\n    // getTextValue(varName) {\n\n    // }\n\n    // getJSONValue(varName) {\n\n    // }\n};","import \"./index.css\";\n\n\nexport class SnackBar {\n    constructor(eleID) {\n        this.el = document.getElementById(eleID || \"snackbar\");\n    }\n\n    show(text) {\n        if (typeof(text) !== \"undefined\" && null !== text) {\n            this.el.innerHTML = text;\n            // Add the \"show\" class to DIV\n            // this.el.className = \"show\";\n            this.el.classList.add(\"show\");\n            // After 3 seconds, remove the show class from DIV\n            setTimeout(() => {\n                // snackbar.className = snackbar.className.replace(\"show\", \"\");\n                this.el.classList.remove(\"show\");\n            }, 3000);\n        }\n    }\n}\n","import { Scene } from \"@isptutorproject/scene-app-base\";\n\nexport class DiInstructionScene extends Scene {\n    constructor(app, sceneInfo) {\n        super(app, sceneInfo);\n        this.customActions = {\n            showBtns: this.showBtns,\n            hideBtns: this.hideBtns,\n            hiliteTableCells: this.hilightTableCells\n        };\n        this.btnNames = {\n            prev: this.app.prevBtn,\n            next: this.app.nextBtn,\n            backToQuestion: this.app.backToQuestionBtn,\n            readyToAnswer: this.app.readyToAnswerBtn\n        };\n    }\n\n    hiliteTableCells(args) {\n        let tableId = `${this.id}_${args.table}`;\n        let table = document.getElementById(tableId);\n        let color = args.color || \"blue\";\n        for (let selector of args.cellSelectors) {\n            let sel = `td${selector}`;\n            let cell = table.querySelector(sel);\n            cell.classList.add(`${color}-bg`);\n        }\n    }\n\n    performCustomEnterSceneActions() {\n        for (let action of this.customEnterActions) {\n            let name = action.name;\n            let args = action.args;\n            if (this.customActions.hasOwnProperty(name)) {\n                this[name](args);\n            }\n        }\n    }\n\n    defaultEnterSceneActions() {\n        super.defaultEnterSceneActions();\n        // these button states may get overriden by scene-specific custom actions\n        this.app.show(this.app.prevBtn);\n        this.app.enable(this.app.prevBtn);\n        this.app.show(this.app.nextBtn);\n        this.app.enable(this.app.nextBtn);\n        this.app.hide(this.app.readyToAnswerBtn);\n        this.app.hide(this.app.backToQuestionBtn);\n    }\n\n};\n","export class Scene {\n    constructor(app, sceneInfo) {\n        console.debug(`\\tInitializing Scene: ${sceneInfo.id}`);\n        this.app = app;\n        // copy all sceneInfo to 'this'\n        for (let [k, v] of Object.entries(sceneInfo)) {\n            this[k] = v;\n        }\n        this.el = document.getElementById(this.id);\n        // bind event handler\n        this.handleFollowEdgeButton = this.handleFollowEdgeButton.bind(this);\n    }\n\n    showBtns(btnNames) {\n        for (let btnName of btnNames) {\n            if (this.btnNames.hasOwnProperty(btnName)) {\n                this.app.show(this.btnNames[btnName]);\n            }\n        }\n    }\n\n    hideBtns(btnNames) {\n        for (let btnName of btnNames) {\n            if (this.btnNames.hasOwnProperty(btnName)) {\n                this.app.hide(this.btnNames[btnName]);\n            }\n        }\n    }\n\n\n    handleFollowEdgeButton(e) {\n        e.preventDefault();\n        let edgeName = e.target.dataset.edge;\n        this.app.followEdge(edgeName);\n    }\n\n    getFollowEdgeElements() {\n        return this.el.getElementsByClassName(\"follow-edge\");\n    }\n\n    setupFollowEdgeEventHandlers() {\n        for (let el of this.getFollowEdgeElements()) {\n            el.addEventListener(\n                \"click\", this.handleFollowEdgeButton, { once: true }\n            );\n        }\n    }\n\n    restoreState(value) {\n        if (typeof (value) !== \"undefined\") {\n            console.debug(`\\tRestoring Scene State for: ${this.id} `);\n            return true;\n        }\n        return false;\n    }\n\n    _isBogus() {\n        return this.id === \"N/A\" || this.sceneType === \"bogus\";\n    }\n\n    handlePrevButton() {\n        this.app.followEdge(\"prev\");\n    }\n\n    handleNextButton() {\n        this.app.followEdge(\"next\");\n    }\n\n    hasForm() {\n        return false;\n    }\n\n    formChanged() {\n        return false;\n    }\n\n    pre_enter() {\n\n    }\n\n    enter() {\n        if (this._isBogus()) {\n            return;\n        }\n        console.debug(`Entering Scene: ${this.id}`);\n        console.debug(\"\\tUpdating state.currentScene\");\n        this.app.state.currentScene = this.id;\n        this.defaultEnterSceneActions();\n        if (this.customEnterActions.length) {\n            this.performCustomEnterSceneActions();\n        }\n    }\n\n    post_enter() {\n\n    }\n\n    pre_exit() {\n\n    }\n\n    exit() {\n        if (this._isBogus()) {\n            return;\n        }\n        console.debug(`Exiting Scene: ${this.id}`);\n        this.defaultExitSceneActions();\n        if (this.customExitActions.length) {\n            this.performCustomExitSceneActions();\n        }\n    }\n\n    post_exit() {\n\n    }\n\n    defaultEnterSceneActions() {\n        this.el.classList.add(\"active\");\n        this.app.resizeContent();\n        this.setupFollowEdgeEventHandlers();\n    }\n\n    defaultExitSceneActions() {\n        this.el.classList.remove(\"active\");\n    }\n\n    performCustomEnterSceneActions() {\n        console.warn(\"Unimplemented Method: performCustomEnterSceneActions\");\n    }\n\n    performCustomExitSceneActions() {\n        console.warn(\"Unimplemented Method: performCustomExitSceneActions\");\n    }\n}\n","\nimport { DiInstructionScene } from \"./di-instruction-scene\";\n\nexport class DiStatsScene extends DiInstructionScene {\n    constructor(app, sceneInfo) {\n        super(app, sceneInfo);\n    }\n\n    defaultEnterSceneActions() {\n        super.defaultEnterSceneActions();\n        this.app.hide(this.app.prevBtn);\n        this.app.hide(this.app.nextBtn);\n    }\n}\n","export class RadioButtonForm {\n    constructor(app, formInfo, eleId) {\n        this.handleChange = this.handleChange.bind(this);\n        this.app = app;\n        this.formInfo = formInfo;\n        this.form = document.getElementById(eleId);\n        this.radios = this.form.querySelectorAll('input[type=\"radio\"]');\n        this.changed = false;\n    }\n\n    isValid() {\n        const validity = this.form.checkValidity();\n        // console.log(\"form is valid:\", validity);\n        return validity;\n    }\n\n    handleChange(e) {\n        // set form to dirty state so it will get saved later on\n        this.changed = true;\n        if (this.isValid()) {\n            this.app.enable(this.app.nextBtn);\n        }\n    }\n\n    setupEventHandlers() {\n        for (let rb of this.radios) {\n            rb.addEventListener('change', this.handleChange);\n        }\n    }\n\n    teardownEventHandlers() {\n        for (let rb of this.radios) {\n            rb.removeEventListener('change', this.handleChange);\n        }\n    }\n\n\n    getCorrectness() {\n        let sfi = this.formInfo;\n        let selectedAnswer = this.form.querySelector(\n            'input[type=\"radio\"]:checked'\n        )\n        let val = selectedAnswer.value.trim();\n        // let ansText = selectedAnswer.labels[0].innerText;\n        let correctAnswer = sfi.correctAnswer;\n        let isCorrect;\n\n        if (\"N/A\" === correctAnswer) {\n            isCorrect = null;\n        } else if (correctAnswer === val) {\n            isCorrect = true;\n        } else {\n            isCorrect = false;\n        }\n        return isCorrect;\n    }\n\n    getFeedback() {\n        let isCorrect = this.getCorrectness();\n        let sfi = this.formInfo;\n        // console.log(isCorrect, sfi);\n        let fbText, fbClassName, fbMsg;\n        switch(isCorrect) {\n            case true:\n                fbText = sfi.posFb;\n                fbClassName = \"pos-feedback\";\n                break;\n            case false:\n                fbText = sfi.negFb;\n                fbClassName = \"neg-feedback\";\n                break;\n            default:\n                fbText = sfi.ntlFb;\n                fbClassName = \"ntl-feedback\";\n        }\n        if (typeof(fbText) === \"undefined\") {\n            if (typeof(sfi.ntlFb) !== \"undefined\") {\n                fbText = sfi.ntlFb;\n            }\n        }\n        if (typeof (fbText) !== \"undefined\") {\n            fbMsg = `<span class=\"${fbClassName}\">${fbText}</span>`;\n        }\n        return fbMsg;\n    }\n\n    getData() {\n        let sfi = this.formInfo;\n        let isCorrect = this.getCorrectness();\n        let selectedAnswer = this.form.querySelector(\n            'input[type=\"radio\"]:checked'\n        );\n        let val = selectedAnswer.value.trim();\n        let lbl = selectedAnswer.labels[0].innerText;\n        let formData = {\n            questionType: sfi.type,\n            questionText: sfi.text,\n            selectedEleId: selectedAnswer.id,\n            selectedValue: val,\n            selectedLabel: lbl,\n            isCorrect: isCorrect,\n            timestamp: Date.now()\n        }\n        // set form to non-dirty state, so we don't resubmit unless they\n        // change again\n        this.changed = false;\n        return formData;\n    }\n\n}","import { DiInstructionScene } from \"./di-instruction-scene\";\n\nimport { RadioButtonForm } from \"@isptutorproject/scene-app-base/radio-button-form\";\n\nexport class DiMultipleChoiceFormScene extends DiInstructionScene {\n    constructor(app, sceneInfo) {\n        super(app, sceneInfo);\n        this.form = new RadioButtonForm(\n            app, sceneInfo.question, `${this.id}_radio_form`\n        );\n    }\n\n    restoreState(value) {\n        if (super.restoreState(value)) {\n            let eleID = `${this.id}_option_${value}`;\n            let el = document.getElementById(eleID);\n            if (typeof(el) === \"undefined\") {\n                console.error(`\\t\\tUnable to Select Radio Button ${eleID}`);\n                return false;\n             } else {\n                el.checked = true;\n                console.debug(`\\t\\tSelected Radio Button: ${eleID}`);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    hasForm() {\n        return true;\n    }\n\n    formChanged() {\n        return this.form.changed;\n    }\n\n    handlePrevButton() {\n        if (this.formChanged()) {\n            this.saveFormData();\n        }\n        super.handlePrevButton();\n    }\n\n    handleNextButton() {\n        if (this.formChanged()) {\n            this.saveFormData();\n        }\n        super.handleNextButton();\n    }\n\n    saveFormData() {\n        this.app.showFeedback(this.form.getFeedback());\n        let data = this.form.getData();\n        let logData = Object.assign(\n            {\n                action_type: \"SUBMIT_ANSWER\",\n                questionId: `${this.app.activityKey}.${this.id}`\n            },\n            data\n        );\n        // console.log(\"Updating state.events\");\n        this.app.state.events.push(logData);\n        // console.log(\"Updating state.sceneState\");\n        // console.log(this.app.state);\n        this.app.state.sceneState[this.id] = data.selectedValue;\n    }\n\n    // pre_exit() {\n    //     super.pre_exit();\n    //     if (this.formChanged()) {\n    //         this.saveFormData();\n    //     }\n    // }\n\n    setupEventHandlers() {\n        this.form.setupEventHandlers();\n    }\n\n    teardownEventHandlers() {\n        this.form.teardownEventHandlers();\n    }\n\n    defaultEnterSceneActions() {\n        super.defaultEnterSceneActions();\n        if (process.env.NODE_ENV === \"production\") {\n            // don't let student skip over question\n            if (! this.form.isValid() ) {\n                this.app.disable(this.app.nextBtn);\n            }\n        }\n        this.setupEventHandlers();\n    }\n\n    defaultExitSceneActions() {\n        super.defaultExitSceneActions();\n        this.teardownEventHandlers();\n    }\n}\n","import \"./styles/index.scss\";\n\nimport { NavBar } from \"@isptutorproject/navbar\";\nimport { getActivityConfiguration } from \"@isptutorproject/activity-config\";\nimport { DiInstructionApp } from \"./di-instruction-app\";\n\nlet activityConfig = getActivityConfiguration();\nlet activityData = require(\"../data/diInstr.json\");\n\nconst DEFAULT_INITIAL_APP_STATE = {\n    events: [],\n    // mapping of sceneid => sceneType-specific data\n    sceneState: {},\n    currentScene: \"start\"\n};\n\nlet navbar = new NavBar();\nnavbar.displayActivityTitle(\"Data Interpretation Lesson\");\nnavbar.displayUser(activityConfig.userID);\nlet app = new DiInstructionApp(\n    activityData, activityConfig, DEFAULT_INITIAL_APP_STATE\n);\nif (process.env.NODE_ENV === \"development\") {\n    app.setStartScene(\"scene28\");\n}\napp.start();\n","export function getActivityConfiguration() {\n    let currentActivity = JSON.parse(localStorage.getItem(\"currentActivity\"));\n    let activityConfig = {\n        userID: localStorage.getItem(\"userID\"),\n        database: localStorage.getItem(\"database\"),\n        homepage: localStorage.getItem(\"homepage\"),\n        activityID: currentActivity.id,\n        activityKey: currentActivity.key,\n        activityFeatures: currentActivity.features.split(\":\").filter((item) => item !== \"\")\n    };\n    console.log(activityConfig);\n    return activityConfig;\n}","import \"./index.css\";\n\nexport class NavBar {\n    constructor() {\n        this.el = document.querySelector(\"nav.navbar\");\n        this.homeBtn = document.getElementById(\"navbar_home_btn\");\n        this.activityTitle = document.getElementById(\"activity_title\");\n        this.glossaryBtn = document.getElementById(\"navbar_glossary_btn\");\n        this.glossaryPopup = document.querySelector(\".navbar-glossary-popup\");\n        this.signOutBtn = document.getElementById(\"sign_out_button\");\n        this.signInText = document.getElementById(\"sign_in_text\");\n        this.goHome      = this.goHome.bind(this);\n        this.toggleGlossary = this.toggleGlossary.bind(this);\n        this.signOutUser = this.signOutUser.bind(this);\n        this.homeBtn.addEventListener('click', this.goHome);\n        this.glossaryBtn.addEventListener(\"click\", this.toggleGlossary);\n        this.signOutBtn.addEventListener(\"click\", this.signOutUser);\n    }\n\n    goHome(e) {\n        let homePage = this.calcHomePage();\n        this.redirectTo(homePage);\n    }\n\n    toggleGlossary(e) {\n        this.glossaryPopup.classList.toggle(\"hidden\");\n    }\n\n    calcHomePage() {\n        let homePage = localStorage.getItem(\"homepage\");\n        if (null === homePage) {\n            homePage = window.location.origin + \"/\";\n        }\n        return homePage;\n    }\n\n    redirectTo(url, allowRefresh=false) {\n        // prevent refresh if already on this page\n        let isSamePage = window.location.href === url;\n        if (!isSamePage) {\n            window.location.href = url;\n        } else if (allowRefresh) {\n            window.location.reload();\n        } else {\n            console.log(\"same url but refresh disabled\");\n        }\n    }\n\n    signOutUser(e) {\n        this.signInText.innerHTML = \"\";\n        this.signInText.classList.add(\"invisible\");\n        this.signOutBtn.classList.add(\"invisible\");\n        let homePage = this.calcHomePage();\n        // this does the actual signing out\n        localStorage.clear();\n        this.redirectTo(homePage, true);\n    }\n\n    displayActivityTitle(title) {\n        this.activityTitle.innerText = title.toUpperCase();\n    }\n\n\n    displayUser(userName) {\n        this.signInText.innerHTML = `Welcome, ${userName}`;\n        this.signInText.classList.remove(\"invisible\");\n        this.signOutBtn.classList.remove(\"invisible\");\n    }\n};\n","import { SceneBasedApp } from \"@isptutorproject/scene-app-base\";\nimport { DiInstructionScene } from \"./di-instruction-scene\";\nimport { DiStatsScene } from \"./di-stats-scene\";\nimport { DiMultipleChoiceFormScene } from \"./di-mult-choice-form-scene\";\n\n\nexport class DiInstructionApp extends SceneBasedApp {\n    constructor(appData, activityConfig, defaultInitialState) {\n        super(appData, activityConfig, defaultInitialState);\n        // bind event handlers\n        this.handleBackToQuestion = this.handleBackToQuestion.bind(this);\n        this.handleReadyToAnswer = this.handleReadyToAnswer.bind(this);\n        this.backToQuestionBtn = document.getElementById(\"back_to_question_btn\");\n        this.readyToAnswerBtn  = document.getElementById(\"ready_to_answer_btn\");\n        this.readyToAnswerBtn.addEventListener(\"click\", this.handleReadyToAnswer);\n        this.backToQuestionBtn.addEventListener(\"click\", this.handleBackToQuestion);\n    }\n\n    handleReadyToAnswer(event) {\n        event.preventDefault();\n        this.followEdge(\"readyToAnswer\");\n    }\n\n    handleBackToQuestion(event) {\n        event.preventDefault();\n        this.followEdge(\"backToQuestion\");\n    }\n\n    createScene(sceneInfo) {\n        let newScene;\n        if (\"stats\" === sceneInfo.sceneType) {\n            newScene = new DiStatsScene(this, sceneInfo);\n        } else if (\"multipleChoiceForm\" === sceneInfo.sceneType) {\n            newScene = new DiMultipleChoiceFormScene(this, sceneInfo);\n        } else {\n            newScene = new DiInstructionScene(this, sceneInfo);\n        }\n        return newScene;\n    }\n\n}\n","import { getDBConnection } from \"@isptutorproject/isp-database\";\nimport { SnackBar} from \"@isptutorproject/snackbar\";\n\nexport class SceneBasedApp {\n    constructor(appData, activityConfig, defaultInitialState) {\n        this.sceneData = appData.scenes;\n        this.activityConfig = activityConfig;\n        this.db = getDBConnection(activityConfig.database);\n        this.db.setCredentials(activityConfig.userID);\n        this.activityID = activityConfig.activityID\n        this.activityKey = activityConfig.activityKey;\n        this.defaultState = defaultInitialState;\n\n        this.snackbar = new SnackBar();\n        this.homePageBtn = null;\n        let homePageBtn  = document.getElementById(\"go_home_btn\");\n        this.nextBtn = document.getElementById(\"next_btn\");\n        this.prevBtn = document.getElementById(\"prev_btn\");\n        this.sceneIdRegion = document.getElementById(\"scene_id_region\");\n        if (homePageBtn) {\n            this.homePageBtn = homePageBtn;\n        }\n        this.handleGoHomePage = this.handleGoHomePage.bind(this);\n        this.handleNext = this.handleNext.bind(this);\n        this.handlePrev = this.handlePrev.bind(this);\n        if (this.homePageBtn) {\n            this.homePageBtn.addEventListener(\"click\", this.handleGoHomePage);\n        }\n        this.handleResize = this.handleResize.bind(this);\n\n        this.nextBtn.addEventListener(\"click\", this.handleNext);\n        this.prevBtn.addEventListener(\"click\", this.handlePrev);\n\n        this.state = {};\n        this.scenes = {};\n        this.startScene = \"start\";\n        this.currentScene = null;\n        this.prevScene = null;\n        // is this needed???\n        this.bogusSceneInfo = {\n            id: \"N/A\",\n            sceneType: \"bogus\"\n        };\n        window.app = this;\n        window.addEventListener(\"resize\", this.handleResize);\n    }\n\n\n    handleResize(event) {\n        // console.log(event);\n        this.resizeContent();\n    }\n\n    resizeContent() {\n        let sEl, cEl, sWidth, sHeight, cWidth, cHeight, sc;\n        sEl = document.querySelector(\".scene.active\");\n        if (sEl) {\n            cEl = sEl.querySelector(\".scene-content\");\n        }\n        if (cEl) {\n            sWidth  = sEl.offsetWidth;\n            sHeight = sEl.offsetHeight;\n            cWidth  = cEl.offsetWidth;\n            cHeight = cEl.offsetHeight;\n            sc = Math.min(\n                sWidth / cWidth,\n                sHeight / cHeight\n            );\n            cEl.style.transform = `translate(-50%, -50%) scale(${sc})`;\n        }\n    }\n\n    // setSnackbar(snackbar) {\n    //     this.snackbar = snackbar;\n    // }\n\n    showFeedback(feedback) {\n        this.snackbar.show(feedback);\n    }\n\n    handleGoHomePage(event) {\n        event.preventDefault();\n        // mark this activity as completed\n        this.db.markActivityAsCompleted(this.activityID)\n        .then(() => {\n            // using top instead of window in case we're in an iframe\n            top.location.href = this.activityConfig.homepage;\n        });\n    }\n\n    handlePrev(event) {\n        event.preventDefault();\n        this.currentScene.handlePrevButton();\n        this.saveAppState();\n    }\n\n    handleNext(event) {\n        event.preventDefault();\n        this.currentScene.handleNextButton();\n        this.saveAppState();\n    }\n\n    setStartScene(sceneId) {\n        console.debug(\"setStartScene()\", sceneId);\n        this.startScene = sceneId;\n    }\n\n    start() {\n        console.log(\"starting\");\n        this.getAppState()\n            .then((state) => {\n                console.log(\"returned from getAppState()\", state);\n                if (null === state) {\n                    console.log(\"no activity data in db. using initial data\")\n                    state = this.defaultState;\n                }\n                this.state = state;\n                return;\n            })\n            .then(() => {\n                console.log(\"Initializing Scenes\");\n                for (let section of document.querySelectorAll(\"section.scene\")) {\n                    let sceneId = section.id;\n                    // console.log(`creating scene for ${sceneId}`);\n                    let sceneObj = this.createScene(this.sceneData[sceneId]);\n                    // console.log(sceneObj);\n                    this.scenes[sceneId] = sceneObj;\n                }\n                return;\n            })\n            .then(() => {\n                console.log(this.state);\n                console.log(this.state.sceneState);\n                console.log(\"Restoring App State\")\n                for (let section of document.querySelectorAll(\"section.scene\")) {\n                    let sceneId = section.id;\n                    let sceneState = this.state.sceneState[sceneId];\n                    this.scenes[sceneId].restoreState(sceneState);\n                }\n                if (this.state.currentScene) {\n                    console.log(\"Restoring Current Scene\");\n                    this.currentScene = this.lookupScene(this.state.currentScene);\n                }\n                return;\n            })\n            .then(() => {\n                // console.debug(this.sceneData);\n                // console.log(this.scenes);\n            })\n            .then(() => {\n                this.gotoStartScene();\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n    }\n\n    getAppState() {\n        console.debug(\"Loading App State\");\n        return this.db.getActivityData(this.activityKey);\n    }\n\n    saveAppState() {\n        console.debug(\"Saving App State\");\n        this.db.setActivityData(this.activityKey, this.state);\n    }\n\n    createScene(sceneInfo) {\n        // you'll want to override this to do anything useful\n        // console.debug(\"createScene()\", sceneInfo, sceneState);\n        return new Scene(this, sceneInfo);\n    }\n\n    switchToScene(scene) {\n        this.logSceneChange(scene);\n        this.gotoScene(scene);\n    }\n\n    gotoScene(scene) {\n        this.prevScene = this.currentScene;\n        if (this.prevScene) {\n            this.prevScene.pre_exit();\n            this.prevScene.exit();\n            this.prevScene.post_exit();\n        }\n        this.currentScene = scene;\n        this.currentScene.pre_enter();\n        this.currentScene.enter();\n        this.currentScene.post_enter();\n        // delete this.prevScene;\n        this.displaySceneId();\n    }\n\n    displaySceneId() {\n        if (process.env.NODE_ENV === \"development\") {\n            this.sceneIdRegion.innerHTML = this.currentScene.id;\n        }\n    }\n\n    lookupScene(sceneId) {\n        let scene = this.scenes[sceneId];\n        if (!scene) {\n            console.error(`ERROR: no such scene ${sceneId}`);\n        }\n        return scene;\n    }\n\n    followEdge(edgeName) {\n        let newSceneId = this.currentScene.edges[edgeName];\n        let newScene = this.lookupScene(newSceneId);\n        this.switchToScene(newScene);\n    }\n\n    logSceneChange(scene) {\n        this.state.events.push({\n            type: \"SCENE_TRANSITION\",\n            from: this.currentScene.id,\n            to: scene.id,\n            timestamp: Date.now()\n        });\n        // console.debug(\"Updating state.events\");\n    }\n\n\n    gotoStartScene() {\n        // bypasses switchToScene() and thus logSceneChange()\n        // this.currentScene = null;\n        let startScene = this.currentScene;\n        if (!startScene) {\n            startScene = this.lookupScene(this.startScene);\n        }\n        this.state.events.push({\n            type: \"APP_START\",\n            scene:  startScene.id,\n            timestamp: Date.now()\n        });\n        // console.debug(\"Updating state.events\");\n        this.gotoScene(startScene);\n    }\n\n\n    hide(el) {\n        if (el) { el.classList.add(\"hidden\"); }\n    }\n\n    show(el) {\n        if (el) { el.classList.remove(\"hidden\"); }\n    }\n\n    makeInvisible(el) {\n        if (el) {\n            el.classList.add(\"invisible\");\n        }\n    }\n\n    makeVisible(el) {\n        if (el) {\n            el.classList.remove(\"invisible\");\n        }\n    }\n\n    disable(el) {\n        if (el) {\n            // console.log(\"disabling:\", el);\n            el.classList.add(\"disabled\");\n        } else {\n            // console.log(\"not disabling non-existinant element:\", el);\n        }\n    }\n\n    enable(el) {\n        if (el) {\n            // console.log(\"disabling:\", el);\n            el.classList.remove(\"disabled\");\n        } else {\n            // console.log(\"not disabling non-existinant element:\", el);\n        }\n    }\n}\n","import { LocalStorageDB } from \"./localStorageDB\";\nimport { FirestoreDB } from \"./firestoreDB\";\n\nexport function getDBConnection(dbType, schema) {\n    let db;\n    switch(dbType) {\n        case \"firestore\":\n            db = new FirestoreDB();\n            break;\n        default:\n            db = new LocalStorageDB();\n    }\n    return db;\n}\n"],"sourceRoot":""}