{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////home/ckot/projects/work/isptutorproject_website/common/activity-config/index.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-captivate/index.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/database.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/firestoreDB.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/index.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/localStorageDB.js","webpack:///./src/iframe.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgE;;AAEzD;AACA;AACA;AACA;;;AAGP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;AAGO;AACP;AACA;AACA;AACA,kBAAkB,qFAAe;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,6DAA6D,QAAQ,OAAO,oBAAoB;AAChG;AACA;AACA;AACA;AACA,qDAAqD,wBAAwB;AAC7E;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uBAAuB;AACzD;AACA;AACA;AACA;AACA,0BAA0B,IAAI,KAAK,eAAe,aAAa,MAAM;AACrE;;AAEA;AACA,8CAA8C,sBAAsB;AACpE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;AC/MO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;;;;;;;;;;;ACxGA;AAAA;AAAA;AAA8C;;AAE9C;AACA;AACA;AACA;AACA;AACA;;AAEO,0BAA0B,kDAAQ;;AAEzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,aAAa;AAC/C,4BAA4B,QAAQ,GAAG,aAAa;AACpD,+BAA+B,gDAAM;AACrC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,kDAAkD,WAAW;AAC7D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC,yCAAyC,kBAAkB;AAC3D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,E;;;;;;;;;;;;ACvPA;AAAA;AAAA;AAAA;AAAkD;AACN;;AAErC;AACP;AACA;AACA;AACA,qBAAqB,wDAAW;AAChC;AACA;AACA,qBAAqB,8DAAc;AACnC;AACA;AACA;;;;;;;;;;;;;;;;;ACZsC;;AAEtC;AACA;AACO,6BAA6B,kDAAQ;;AAE5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uCAAuC,WAAW;AAClD,wCAAwC,WAAW;AACnD,2CAA2C,WAAW;AACtD,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uEAAuE,MAAM;AAC7E;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA,gEAAgE,SAAS;AACzE;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,sEAAsE,MAAM;AAC5E;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA,+DAA+D,UAAU;AACzE;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;;AC/PA;AAAA;AAAA;AAGwC;;AAEoC;;;AAG5E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sCAAsC,mFAAoB;AAC1D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,iDAAiD,qBAAqB,yBAAyB,aAAa;AAC5G,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iDAAiD,qBAAqB,yBAAyB,YAAY;AAC3G,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,yBAAyB,iGAAwB;;AAEjD;AACA;AACA;AACA;AACA;;;AAGA;AACA","file":"iframe.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/iframe.js\");\n","export function getActivityConfiguration() {\n    let currentActivity = JSON.parse(localStorage.getItem(\"currentActivity\"));\n    let activityConfig = {\n        userID: localStorage.getItem(\"userID\"),\n        database: localStorage.getItem(\"database\"),\n        homepage: localStorage.getItem(\"homepage\"),\n        activityID: currentActivity.id,\n        activityKey: currentActivity.key,\n        activityFeatures: currentActivity.features.split(\":\").filter((item) => item !== \"\")\n    };\n    console.log(activityConfig);\n    return activityConfig;\n}","import { getDBConnection } from \"@isptutorproject/isp-database\";\n\nexport const EVT_ON_VAR_CHANGE  = \"CPAPI_VARIABLEVALUECHANGED\";\nexport const EVT_ON_SLIDE_ENTER = \"CPAPI_SLIDEENTER\";\nexport const EVT_ON_SLIDE_EXIT  = \"CPAPI_SLIDEEXIT\";\nexport const EVT_ON_QUES_SUBMIT = \"CPAPI_QUESTIONSUBMIT\";\n\n\nconst INITIAL_STATE = {\n    transitions: [],\n    answers: [],\n    variableChanges: []\n};\n\n// allows us to log to the parent windows console\n// NOTE: the parent window needs to have some companion\n// code to make this work\nconst _log = console.log;\n// Override the console\nconsole.log = function (...rest) {\n    // window.parent is the parent frame that made this window\n    window.parent.postMessage(\n        {\n            source: 'iframe',\n            message: rest,\n        },\n        '*'\n    );\n    // Finally applying the console statements to saved instance earlier\n    _log.apply(console, arguments);\n};\n\n\nexport class ISPCaptivateActivity {\n    constructor(activityConfig, cpAPI, variablesToTrack) {\n        console.log(activityConfig);\n        this.activityConfig = activityConfig;\n        this.db = getDBConnection(activityConfig.database);\n        this.userID = activityConfig.userID;\n        this.activityID = activityConfig.activityID;\n        this.activityKey = activityConfig.activityKey;\n        this.features = activityConfig.activityFeatures;\n        // bind event handlers\n        this.onSlideEnter = this.onSlideEnter.bind(this);\n        this.onQuestionSubmit = this.onQuestionSubmit.bind(this);\n        this.onVarChange = this.onVarChange.bind(this);\n        // this.onSlideTransition = this.onSlideTransition.bind(this);\n        this.cpAPI = cpAPI;\n        this.cpEventEmitter = this.cpAPI.getEventEmitter();\n        this.variablesToTrack = variablesToTrack;\n        }\n\n\n    init() {\n        this.db.setCredentials(this.userID);\n        this.getAppData()\n        .then((state) => {\n            console.log(\"getAppData() returned:\", state);\n            if (typeof(state) === \"undefined\" || null === state) {\n                // if no state exists in db, copy INITIAL_STATE\n                this.state = { ...INITIAL_STATE };\n            } else {\n                console.log(\"Restoring App State from database\");\n                this.state = state;\n            }\n            this.showState();\n            return this.state;\n        })\n        .then(() => {\n            // do some stuff beforehand (if necessary) prior to\n            // setting up event handlers\n            this.processFeatures();\n            this.restoreCaptivateState();\n            this.setupEventHandlers();\n        });\n\n    }\n\n    processFeatures() {\n\n    }\n\n    restoreCaptivateState() {\n\n        for (let varName of this.variablesToTrack) {\n            if (varName in this.state) {\n                console.log(`Restoring Captivate Variable \"${varName}\" to ${this.state[varName]}`);\n                this.setCaptivateVariable(varName, this.state[varName]);\n            }\n        }\n        if (\"currentSlide\" in this.state) {\n            console.log(`restoring to slide number ${this.state.currentSlide}`);\n            this.gotoSlide(this.state.currentSlide);\n        } else {\n            console.log(\"skipping slide 1\");\n            this.gotoSlide(2);\n        }\n    }\n\n    showState() {\n        console.log(this.state);\n    }\n\n    pushTransition(transition) {\n        // console.log(transition);\n        this.state.transitions.push(transition);\n        this.state.currentSlide = transition.slide_number;\n        this.showState();\n    }\n\n    pushAnswer(answer) {\n        // console.log(answer);\n        this.state.answers.push(answer);\n        this.showState();\n    }\n\n    pushVarChange(varChange) {\n        if (typeof (this.state.variableChanges) === \"undefined\") {\n            this.state.variableChanges = [];\n        }\n        this.state.variableChanges.push(varChange);\n        this.showState();\n    }\n\n\n    setupEventHandlers() {\n        this.cpEventEmitter.addEventListener(EVT_ON_SLIDE_ENTER,\n                                             this.onSlideEnter);\n        // this.cpEventEmitter.addEventListener(EVT_ON_SLIDE_EXIT,\n        //                                      this.onSlideTransition);\n        this.cpEventEmitter.addEventListener(EVT_ON_QUES_SUBMIT,\n                                             this.onQuestionSubmit);\n        for (let varName of this.variablesToTrack) {\n            this.cpEventEmitter.addEventListener(\n                EVT_ON_VAR_CHANGE, this.onVarChange, varName\n            );\n        }\n        this.setupCustomEventHandlers();\n    }\n\n    setupCustomEventHandlers() {\n        // hook for initializing any custom event handlers\n    }\n\n    onSlideEnter(evt) {\n        this.pushTransition({\n            slide_number: evt.cpData.slideNumber,\n            slide_label: evt.cpData.lb,\n            timestamp: Date.now()\n        });\n        this.saveAppData();\n    }\n\n    getAppData() {\n        console.log(\"looking for saved app data in database\");\n        return this.db.getActivityData(this.activityKey)\n        .then((data) => {\n            console.log(data);\n            return data;\n        });\n    }\n\n    saveAppData() {\n        console.log(\"saving app data\");\n        this.db.setActivityData(this.activityKey, this.state)\n    }\n    // onSlideTransition(evt) {\n    //     // console.log(evt);\n    //     const transitionType = (\"CPSlideEnter\" === evt.cpName) ? \"enter\" : \"exit\";\n    //     let label = evt.cpData.lb;\n    //     const slideNumber = `${evt.cpData.slideNumber}`;\n    //     if (\"\" === label) {\n    //         label = slideNumber;\n    //     }\n    //     const now = Date.now();\n    //     console.log(`${now}:: ${transitionType}ing slide: ${label}`);\n    // }\n\n    onQuestionSubmit(evt) {\n        let data = Object.assign(evt.cpData, {timestamp: Date.now()});\n        this.pushAnswer(data);\n    }\n\n    onVarChange(evt) {\n        const now = Date.now();\n        const varName = evt.cpData.varName;\n        const newVal = evt.cpData.newVal;\n        const oldVal = evt.cpData.oldVal;\n        this.state[varName] = newVal;\n        this.pushVarChange({\n            variable: varName,\n            newValue: newVal,\n            oldValue: oldVal,\n            timestamp: now\n        });\n    }\n\n    gotoSlide(slideNumber) {\n        // wierd. when animate reports the slide number you are on, they\n        // are one-based, but gotoSlide() is 0 based\n        console.log(\"manually navigating to slide:\", slideNumber);\n        this.cpAPI.gotoSlide(slideNumber-1);\n    }\n\n    setCaptivateVariable(varName, value) {\n        this.cpAPI.setVariableValue(varName, value);\n    }\n\n}\n","\nexport const STUDY3 = {\n    conditionActivities: {\n        1: [\n            \"matsPreTest\",\n            \"diPreTest\",\n            \"reSelectBL\",\n            \"hypoWEoneDir\",\n            \"diInstrGR\",\n            \"diCrystalGrowthTest\",\n            \"diPostTest\",\n            \"matsPostTest\"\n        ],\n        2: [\n            \"matsPreTest\",\n            \"diPreTest\",\n            \"reSelectBL\",\n            \"hypoWEbiDir\",\n            \"diInstrGR\",\n            \"diCrystalGrowthTest\",\n            \"diPostTest\",\n            \"matsPostTest\"\n        ]\n    }\n};\n\n// abstract class - interface\nexport class Database {\n    constructor(dbType) {\n        this.dbType = dbType;\n    }\n\n    setCredentials(userID) {\n        this.userID = userID;\n    }\n\n    lookupUserID(formData) {\n\n    }\n\n    loginUser(userID) {\n\n    }\n\n    registerUser(formData) {\n\n    }\n\n    getUserData() {\n\n    }\n\n    getActivityData(activityKey, decodeJSON = true) {\n\n    }\n\n    setActivityData(activityKey, object) {\n\n    }\n\n    getRQData() {\n\n    }\n\n    getCurrHypoTask() {\n\n    }\n\n    getInitialHypoData() {\n\n    }\n\n    getFinalHypoData() {\n\n    }\n\n    saveValue(varName, value) {\n\n    }\n\n    saveJSONValue(varName, object) {\n\n    }\n\n    getBoolValue(varName) {\n\n    }\n\n    getIntValue(varName) {\n\n    }\n\n    getFloatValue(varName) {\n\n    }\n\n    getTextValue(varName) {\n\n    }\n\n    getJSONValue(varName) {\n\n    }\n\n};\n\n\n","import { STUDY3, Database } from \"./database\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyD7zIk-8V20QqJNSs0cAV0uNL3qjeqLMdM\",\n    authDomain: \"isptutor.firebaseapp.com\",\n    projectId: \"isptutor\"\n};\n\nexport class FirestoreDB extends Database {\n\n    constructor() {\n        super(\"firestore\");\n        firebase.initializeApp(firebaseConfig);\n        this.store = firebase.firestore();\n    }\n\n    setCredentials(userID) {\n        super.setCredentials(userID);\n        this.userRef = this.store.collection(\"STUDY_3\").doc(userID);\n    }\n\n    getNextUserNum() {\n        return this.store.collection(\"STUDY_3\").doc(\"study_data\").update({\n            usernum: firebase.firestore.FieldValue.increment(1)\n        }).then(() => this.store.collection(\"STUDY_3\").doc(\"study_data\").get())\n        .then((doc) => {\n            return doc.data().usernum;\n        })\n        .catch((error) => console.error(error));\n    }\n\n    // loginUser(classCode, userID) {\n    //     let retVal;\n    //     return this.store.collection(\"STUDY_3\")\n    //         .where(\"classCode\", \"==\", classCode)\n    //         .where(\"userID\", \"==\", userID)\n    //         .get()\n    //         .then((snapshot) => {\n    //             if (1 !== snapshot.size) {\n    //                 return false;\n    //             }\n    //             this.userRef = snapshot.docs[0];\n    //             return true;\n    //         })\n    // }\n\n    loginUser(userID) {\n        let docRef = this.store.collection(\"STUDY_3\").doc(userID);\n        return docRef.get()\n        .then((doc) => {\n            if (!doc.exists) {\n                return false;\n            } else {\n                this.userRef = docRef;\n                return this.getUserData()\n            }\n        });\n    }\n\n    lookupUserID(formData) {\n        // returns userID (truthy) or false\n        return this.store.collection(\"STUDY_3\")\n            .where(\"classCode\", \"==\", formData.classCode)\n            .where(\"FN\",        \"==\", formData.FN)\n            .where(\"LN\",        \"==\", formData.LN)\n            .where(\"MON\",       \"==\", formData.MON)\n            .where(\"DAY\",       \"==\", formData.DAY)\n            .get()\n            .then((snapshot) => {\n                // console.log(snapshot);\n                if (1 !== snapshot.size) {\n                    return false;\n                } else {\n                    console.log('record found');\n                    let userID = false;\n                    let data = snapshot.docs[0].data();\n                    if (data.userID) {\n                        userID = data.userID;\n                    } else {\n                        console.log(\"no userID field\", data);\n                    }\n                    return userID;\n                }\n            })\n            .catch((error) => {\n                console.log(error);\n                return false;\n            });\n    }\n\n    registerUser(formData) {\n        let userID = false;\n        console.log('registering user');\n        return this.getNextUserNum()\n        .then((userNum) => {\n            // if even cond1 if odd cond2\n            let conditionNum = (userNum % 2) + 1;\n            let conditionStr = `${conditionNum}`;\n            userID = `USER${userNum}_${conditionNum}`;\n            let activityList = STUDY3.conditionActivities[conditionStr];\n            let data = Object.assign(formData, {\n                userID: userID,\n                condition: conditionStr,\n                assignments: JSON.stringify(activityList),\n                completedAssignments: JSON.stringify([])\n            })\n            return this.store.collection(\"STUDY_3\").doc(userID).set(data)\n        })\n        .then(() => {\n            return userID;\n        })\n        .catch((error) => {\n            console.error(error);\n            return false;\n        })\n    }\n\n    getUserData() {\n        // returns promise with 'doc' if it exists, false otherwise\n        let userData = false;\n        return this.userRef.get()\n        .then((doc) => {\n            if (doc.exists) {\n                let data = doc.data();\n                userData = {\n                    userID: data.userID,\n                    condition: data.condition,\n                    assignments: JSON.parse(data.assignments),\n                    completedAssignments: JSON.parse(data.completedAssignments)\n                }\n            }\n            return userData;\n        });\n    }\n\n    markActivityAsCompleted(activityId) {\n        // console.log(`markActivityAsCompleted(${activityId})`);\n        return this.userRef.get()\n        .then((doc) => {\n            let data = doc.data();\n            return JSON.parse(data.completedAssignments)\n        })\n        .then((completedAssignments) => {\n            // console.log(\"BEFORE:\", completedAssignments);\n            if (!completedAssignments.includes(activityId)) {\n                completedAssignments.push(activityId);\n            }\n            // console.log(\"AFTER\", completedAssignments)\n            return this.userRef.update({\n                completedAssignments: JSON.stringify(completedAssignments)\n            });\n        });\n    }\n\n    getCurrHypoTask() {\n\n    }\n\n    getActivityData(activityKey, decodeJSON=true) {\n        return this.userRef.get()\n        .then((doc) => doc.data())\n        .then((userData) => {\n            console.log(\"userData\", userData);\n            if (!userData) {\n                return null;\n            }\n            let data = userData[activityKey];\n            if (!data) {\n                return null;\n            }\n            if (data && decodeJSON) {\n                return JSON.parse(data);\n            } else {\n                return data;\n            }\n        }).catch((error) => {\n            console.error(error);\n            return null;\n        });\n    }\n\n    setActivityData(activityKey, state) {\n        let activityState = JSON.stringify(state);\n        return this.userRef.update({\n            [activityKey]: activityState\n        })\n        .then(() => {\n            console.log(\"app data saved successefully\")\n        }).catch((error) => {\n            console.error(error);\n        });\n    }\n    // getRQData() {\n    //     return this.getAppData(\"rqted\");\n    // }\n\n\n    // getInitialHypoData() {\n    //     return this.getAppData(\"initialHypo\")\n    //     .then((strData))\n    // }\n\n    // getFinalHypoData() {\n    //     return this.getAppData(\"finalHypo\")\n    // }\n\n    setValues(object, overwrite=false) {\n        // default to {merge: true} option for safety\n        return this.userRef.set(object, {merge: !overwrite});\n    }\n\n    updateValues(object) {\n        return this.userRef.update(object);\n    }\n\n    deleteValue(varName) {\n        return this.userRef.update({\n            [varName]: firebase.firestore.FieldValue.delete()\n        });\n    }\n\n    // saveJSONValue(varName, value) {\n    //     return this.userRef.set({\n    //         [varName]: JSON.stringify(value)\n    //     });\n    // }\n\n    // getBoolValue(varName) {\n\n    // }\n\n    // getIntValue(varName) {\n\n    // }\n\n    // getFloatValue(varName) {\n\n    // }\n\n    // getTextValue(varName) {\n\n    // }\n\n    // getJSONValue(varName) {\n\n    // }\n};","import { LocalStorageDB } from \"./localStorageDB\";\nimport { FirestoreDB } from \"./firestoreDB\";\n\nexport function getDBConnection(dbType, schema) {\n    let db;\n    switch(dbType) {\n        case \"firestore\":\n            db = new FirestoreDB();\n            break;\n        default:\n            db = new LocalStorageDB();\n    }\n    return db;\n}\n","\nimport { Database } from \"./database\";\n\n// NOTE: this API must use promises to be compatible with any db\n// we may be using, which may be either sync or async\nexport class LocalStorageDB extends Database {\n\n    constructor() {\n        super();\n    }\n\n    setCredentials(classCode, userID) {\n        super.setCredentials(classCode, userID);\n        // return Promise.all([\n        // this.saveValue(\"classCode\", classCode),\n        // this.saveValue(\"userID\", userID),\n        // ]).then(([result1, result2]) => { });\n    }\n\n    getUserData() {\n        console.count(\"getUserData() called\");\n        let data = {};\n        return Promise.all([\n            this.getTextValue(\"classCode\"),\n            this.getTextValue(\"userID\"),\n            this.getActivityData(\"rqted\"),\n            this.getCurrHypoTask(),\n            this.getIntialHypoData(),\n            this.getFinalHypoData()\n        ]).then(([ccRes, uidRes, rqRes, chtRes, ihRes, fhRes]) => {\n            data.classCode = ccRes;\n            data.userID = uidRes;\n            data.rqted = rqRes;\n            if (chtRes) {\n                data.currHypoTaskIdx = chtRes\n            }\n            if (ihRes) {\n                data.firstPrediction = ihRes.firstPrediction;\n                data.initialHypo = ihRes.initialHypo;\n            }\n            if (fhRes) {\n                data.secondPrediction = fhRes.secondPrediction;\n                data.finalHypo = fhRes.finalHypo;\n            }\n            return data;\n        });\n    }\n\n    getActivityData(activityKey, decodeJSON = true) {\n        return this.getJSONValue(activityKey)\n        .then((data) => {\n            if (data && !decodeJSON) {\n                return JSON.stringify(data);\n            } else {\n                return data;\n            }\n        });\n    }\n\n    setActivityData(activityKey, object) {\n        return this.saveJSONValue(activityKey, object);\n    }\n\n    getRQData() {\n        let retVal = null;\n        return this.getActivityData(\"rqted\")\n        .then((rqted) => {\n            // console.log(rqted);\n            if (rqted) {\n                retVal = rqted;\n            } else {\n                // if the rq isn't selected hard-code to crystal growth\n                retVal = {\n                    moduleState: {\n                        selectedArea: { index: 1 },\n                        selectedTopic: { index: 1 },\n                        selectedVariable: { index: 1 },\n                        selectedRQ: { index: 1 }\n                    }\n                };\n            }\n            // console.log(retVal);\n            return retVal;\n        })\n        .catch((err) => {\n            console.error(err);\n            return retVal;\n        });\n    }\n\n    getCurrHypoTask() {\n        return this.getIntValue(\"currHypoTaskIdx\")\n    }\n\n    getIntialHypoData() {\n        let data = {};\n        return this.getTextValue(\"firstPrediction\")\n            .then((pred1) => {\n                // console.log(`getInitialHypoData():firstPrediction ${pred1}`);\n                if (null !== pred1) {\n                    data.firstPrediction = pred1;\n                    return this.getJSONValue(\"initialHypo\");\n                } else {\n                    data.firstPrediction = null;\n                    return null;\n                }\n            })\n            .then((initHypo) => {\n                // console.log(`getInitialHypoData():initHypo ${initHypo}`);\n                data.initialHypo = initHypo;\n                return data;\n            })\n            .catch((err) => {\n                console.error(err);\n                return data;\n            });\n    }\n\n    getFinalHypoData() {\n        let data = {};\n        return this.getTextValue(\"secondPrediction\")\n            .then((pred2) => {\n                // console.log(`getFinalHypoData():secondPrediction ${pred2}`)\n                if (null !== pred2) {\n                    data.secondPrediction = pred2;\n                    return this.getJSONValue(\"finalHypo\");\n                } else {\n                    data.secondPrediction = null;\n                    return null\n                }\n            })\n            .then((finalHypo) => {\n                // console.log(`getFinalHypoData():finalHypo ${finalHypo}`);\n                data.finalHypo = finalHypo;\n                return data;\n            })\n            .catch((err) => {\n                console.error(err);\n                return data;\n            });\n    }\n\n    setValues(object, overwrite=false) {\n        // overwrite param is ignored, as it is specific to firestore\n        return new Promise((resolve, reject) => {\n            try {\n                for (let [key, value] of Object.items(object)) {\n                    localStorage.setItem(key, value);\n                }\n                resolve(true);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    saveValue(varName, value) {\n        return new Promise((resolve, reject) => {\n            try {\n                resolve(localStorage.setItem(varName, value));\n            } catch(err) {\n                reject(err);\n            }\n        })\n    }\n\n    saveJSONValue(varName, object) {\n        return new Promise((resolve, reject) => {\n            try {\n                let value = JSON.stringify(object);\n                resolve(localStorage.setItem(varName, value));\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getBoolValue(varName) {\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (undefined === value) {\n                    resolve(value);\n                }\n                if (\"true\" === value) {\n                    resolve(true);\n                } else {\n                    resolve(false);\n                }\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getIntValue(varName) {\n        let retVal;\n        return new Promise((resolve, reject) => {\n            try {\n               let value = localStorage.getItem(varName);\n                if (value) {\n                    retVal = parseInt(value, 10);\n                }\n                resolve(retVal);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getFloatValue(varName) {\n        let retVal;\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (value) {\n                    retVal = parseFloat(value);\n                }\n                resolve(retVal);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getTextValue(varName) {\n        let retVal;\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (value) {\n                    retVal = value;\n                }\n                resolve(value);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    };\n\n    getJSONValue(varName) {\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (value) {\n                    value = JSON.parse(value);\n                }\n                resolve(value);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n};\n\n// let db = new Database(\"BOGUS_CLASS\", \"BOGUS_STUDENT\");\n\n","import {\n    // EVT_ON_VAR_CHANGE,\n    ISPCaptivateActivity\n} from \"@isptutorproject/isp-captivate\";\n\nimport { getActivityConfiguration } from \"@isptutorproject/activity-config\";\n\n\nconst FTR_ONE_DIR = \"FTR_ONE_DIRECTIONAL\";\nconst FTR_BI_DIR  = \"FTR_BI_DIRECTIONAL\";\nconst COND_ONE_DIR = \"one-directional\";\nconst COND_BI_DIR  = \"bi-directional\";\n\nconst TRACKED_VARS = [\n    \"condition\",\n    \"gender\",\n    \"prediction\",\n    \"sibling\",\n    \"VINName\",\n    \"VINTwinName\"\n];\n\nfunction undefinedOrSame(currState, value) {\n    return (\"undefined\" === typeof(currState) || currState === value)\n}\n\nclass HypoWECaptivateActivity extends ISPCaptivateActivity {\n    constructor(activityConfig, cpAPI, varsToTrack) {\n        super(activityConfig, cpAPI, varsToTrack);\n    }\n\n    processFeatures() {\n        let feats = [...this.features];\n        let hasOneDir = feats.includes(FTR_ONE_DIR);\n        let hasBiDir = feats.includes(FTR_BI_DIR);\n        let currentDBVal = this.state.condition;\n        if (hasOneDir && hasBiDir) {\n            console.error(\"has features for both conditions\");\n        } else if (!hasOneDir && !hasBiDir) {\n            console.error(\"doesn't have feature for either condition\");\n        } else if (hasOneDir) {\n            if (!undefinedOrSame(this.state.condition, COND_ONE_DIR)) {\n                console.error(`state.condition(${this.state.condition}) !== to feature value(${COND_ONE_DIR})`);\n            } else {\n                this.state.condition = COND_ONE_DIR;\n                feats = feats.filter((item) => item !== FTR_ONE_DIR);\n                this.setCaptivateVariable(\"condition\", COND_ONE_DIR);\n            }\n        } else if (hasBiDir) {\n            if (!undefinedOrSame(this.state.condition, COND_BI_DIR)) {\n                console.error(`state.condition(${this.state.condition}) !== to feature value(${COND_BI_DIR})`);\n            } else {\n                this.state.condition = COND_BI_DIR;\n                feats = feats.filter((item) => item !== FTR_BI_DIR);\n                this.setCaptivateVariable(\"condition\", COND_BI_DIR);\n            }\n        } else {\n            console.error(\"WTF! how did I get here?\")\n        }\n        console.log(\"remaining feats:\", feats);\n        console.log(\"# remaining feats\", feats.length);\n    }\n\n}\n\nfunction initApp(event) {\n    console.log(\"initApp()\");\n    let activityConfig = getActivityConfiguration();\n\n    // event.Data is the same as window.cpAPIInterface\n    const cpAPI = event.Data;\n    const app = new HypoWECaptivateActivity(activityConfig, cpAPI, TRACKED_VARS);\n    app.init();\n}\n\n\n// window.addEventListener(\"load\", initApp);\nwindow.addEventListener(\"moduleReadyEvent\", initApp);\n"],"sourceRoot":""}