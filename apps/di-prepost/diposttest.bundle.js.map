{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////home/ckot/projects/work/isptutorproject_website/common/navbar/index.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/activity-config/index.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/database.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/localStorageDB.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/firestoreDB.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/snackbar/index.js","webpack:///./src/scenes/testScene.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/scene-app-base/scene.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/scene-app-base/radio-button-form.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/scene-app-base/textarea-form.js","webpack:///./src/scenes/testResultsScene.js","webpack:///./src/scenes/singleTableResultsScene.js","webpack:///./src/scenes/dualTableResultsScene.js","webpack:///./src/index.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/scene-app-base/app.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/index.js","webpack:///./src/posttest.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","NavBar","this","el","document","querySelector","homeBtn","getElementById","activityTitle","signOutBtn","signInText","goHome","signOutUser","addEventListener","e","homePage","calcHomePage","redirectTo","localStorage","getItem","window","location","origin","url","href","innerHTML","classList","add","clear","title","innerText","toUpperCase","userName","remove","getActivityConfiguration","activityConfig","userID","classCode","database","homepage","activityKey","features","split","filter","item","console","log","Database","decodeJSON","varName","super","setCredentials","count","data","Promise","all","getTextValue","getActivityData","getCurrHypoTask","getIntialHypoData","getFinalHypoData","then","ccRes","uidRes","rqRes","chtRes","ihRes","fhRes","rqted","currHypoTaskIdx","firstPrediction","initialHypo","secondPrediction","finalHypo","getJSONValue","JSON","stringify","saveJSONValue","retVal","moduleState","selectedArea","index","selectedTopic","selectedVariable","selectedRQ","catch","err","error","getIntValue","pred1","initHypo","pred2","overwrite","resolve","reject","items","setItem","undefined","parseInt","parseFloat","parse","firebaseConfig","apiKey","authDomain","projectId","firebase","initializeApp","store","firestore","userRef","collection","doc","exists","getUserData","userData","set","merge","update","FieldValue","delete","SnackBar","eleID","text","setTimeout","app","sceneInfo","debug","id","k","v","entries","handleFollowEdgeButton","btnNames","btnName","show","hide","preventDefault","edgeName","target","dataset","edge","followEdge","getElementsByClassName","getFollowEdgeElements","once","sceneType","_isBogus","state","currentScene","defaultEnterSceneActions","customEnterActions","length","performCustomEnterSceneActions","defaultExitSceneActions","customExitActions","performCustomExitSceneActions","setupFollowEdgeEventHandlers","warn","customActions","showBtns","hideBtns","prev","prevBtn","next","nextBtn","action","args","enable","RadioButtonForm","formInfo","eleId","handleChange","form","radios","querySelectorAll","changed","checkValidity","isValid","rb","removeEventListener","isCorrect","sfi","val","trim","correctAnswer","fbText","fbClassName","fbMsg","getCorrectness","posFb","negFb","ntlFb","selectedAnswer","lbl","labels","formData","questionType","type","questionText","selectedEleId","selectedValue","selectedLabel","timestamp","Date","now","TextareaForm","textarea","answer","q1Answer","currentTransition","currentTransitionStateSaver","currentState","saveQ1State","saveQ2State","saveQ3State","revealStatHandler","handleSortData","showSortedDataBtn","sortedTableText","q2TextArea","currentForm","q1Form","questions","q1","q2Form","q2","q3Form","q3","forms","q2Text","q3Text","setupEventHandlers","sceneState","restoreState","q1Selection","checked","updateQ2AndQ3Text","q2Answer","q3Selection","side","stat","revealStat","dataSorted","showSortedData","replaceSortBtnWithText","diff","assign","btnEl","statEl","_1","_2","replace","updateSceneState","events","push","time","f","getData","handleTransition","btn","phRepl","submitQuestion","qNum","logData","questionId","hideAllForms","disable","focus","table","tbody","rows","col1Vals","map","tr","col2Vals","sort","a","b","createElement","col1","col2","appendChild","_sortTable","_compareRows","row","leftTable","rightTable","appData","defaultInitialState","sceneData","scenes","db","dbType","getDBConnection","defaultState","snackbar","homePageBtn","sceneIdRegion","handleGoHomePage","handleNext","handlePrev","startScene","prevScene","bogusSceneInfo","feedback","event","handlePrevButton","saveAppState","handleNextButton","sceneId","getAppState","section","sceneObj","createScene","lookupScene","gotoStartScene","setActivityData","Scene","scene","logSceneChange","gotoScene","pre_exit","exit","post_exit","pre_enter","enter","post_enter","displaySceneId","newSceneId","edges","newScene","switchToScene","from","to","activityData","navbar","displayActivityTitle","displayUser","start"],"mappings":"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","file":"diposttest.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","import \"./index.css\";\n\nexport class NavBar {\n    constructor() {\n        this.el = document.querySelector(\"nav.navbar\");\n        this.homeBtn = document.getElementById(\"navbar_home_btn\");\n        this.activityTitle = document.getElementById(\"activity_title\");\n        this.signOutBtn = document.getElementById(\"sign_out_button\");\n        this.signInText = document.getElementById(\"sign_in_text\");\n        this.goHome      = this.goHome.bind(this);\n        this.signOutUser = this.signOutUser.bind(this);\n        this.homeBtn.addEventListener('click', this.goHome);\n        this.signOutBtn.addEventListener(\"click\", this.signOutUser);\n    }\n\n    goHome(e) {\n        let homePage = this.calcHomePage();\n        this.redirectTo(homePage);\n    }\n\n    calcHomePage() {\n        let homePage = localStorage.getItem(\"homepage\");\n        if (null === homePage) {\n            homePage = window.location.origin + \"/\";\n        }\n        return homePage;\n    }\n\n    redirectTo(url) {\n        // prevent refresh if already on this page\n        if (window.location.href !== url) {\n            window.location.href = url;\n        }\n    }\n\n    signOutUser(e) {\n        this.signInText.innerHTML = \"\";\n        this.signInText.classList.add(\"invisible\");\n        this.signOutBtn.classList.add(\"invisible\");\n        let homePage = this.calcHomePage();\n        // this does the actual signing out\n        localStorage.clear();\n        this.redirectTo(homePage);\n    }\n\n    displayActivityTitle(title) {\n        this.activityTitle.innerText = title.toUpperCase();\n    }\n\n\n    displayUser(userName) {\n        this.signInText.innerHTML = `Welcome, ${userName}`;\n        this.signInText.classList.remove(\"invisible\");\n        this.signOutBtn.classList.remove(\"invisible\");\n    }\n};\n","export function getActivityConfiguration() {\n    let activityConfig = {\n        userID: localStorage.getItem(\"userID\"),\n        classCode: localStorage.getItem(\"classCode\"),\n        database: localStorage.getItem(\"database\"),\n        homepage: localStorage.getItem(\"homepage\"),\n        activityKey: localStorage.getItem(\"currentActivity\"),\n        features: (localStorage.getItem(\"currentActivityFeatures\") || \"\")\n                  .split(\":\")\n                  .filter((item) => item !== \"\")\n    };\n    console.log(activityConfig);\n    return activityConfig;\n}","// abstract class - interface\nexport class Database {\n    constructor() {\n\n    }\n\n    setCredentials(classCode, userID) {\n        this.classCode = classCode;\n        this.userID = userID;\n    }\n\n    getUserData() {\n\n    }\n\n    getActivityData(activityKey, decodeJSON = true) {\n\n    }\n\n    setActivityData(activityKey, object) {\n\n    }\n\n    getRQData() {\n\n    }\n\n    getCurrHypoTask() {\n\n    }\n\n    getInitialHypoData() {\n\n    }\n\n    getFinalHypoData() {\n\n    }\n\n    saveValue(varName, value) {\n\n    }\n\n    saveJSONValue(varName, object) {\n\n    }\n\n    getBoolValue(varName) {\n\n    }\n\n    getIntValue(varName) {\n\n    }\n\n    getFloatValue(varName) {\n\n    }\n\n    getTextValue(varName) {\n\n    }\n\n    getJSONValue(varName) {\n\n    }\n\n};\n\n\n","\nimport { Database } from \"./database\";\n\n// NOTE: this API must use promises to be compatible with any db\n// we may be using, which may be either sync or async\nexport class LocalStorageDB extends Database {\n\n    constructor() {\n        super();\n    }\n\n    setCredentials(classCode, userID) {\n        super.setCredentials(classCode, userID);\n        // return Promise.all([\n        // this.saveValue(\"classCode\", classCode),\n        // this.saveValue(\"userID\", userID),\n        // ]).then(([result1, result2]) => { });\n    }\n\n    getUserData() {\n        console.count(\"getUserData() called\");\n        let data = {};\n        return Promise.all([\n            this.getTextValue(\"classCode\"),\n            this.getTextValue(\"userID\"),\n            this.getActivityData(\"rqted\"),\n            this.getCurrHypoTask(),\n            this.getIntialHypoData(),\n            this.getFinalHypoData()\n        ]).then(([ccRes, uidRes, rqRes, chtRes, ihRes, fhRes]) => {\n            data.classCode = ccRes;\n            data.userID = uidRes;\n            data.rqted = rqRes;\n            if (chtRes) {\n                data.currHypoTaskIdx = chtRes\n            }\n            if (ihRes) {\n                data.firstPrediction = ihRes.firstPrediction;\n                data.initialHypo = ihRes.initialHypo;\n            }\n            if (fhRes) {\n                data.secondPrediction = fhRes.secondPrediction;\n                data.finalHypo = fhRes.finalHypo;\n            }\n            return data;\n        });\n    }\n\n    getActivityData(activityKey, decodeJSON = true) {\n        return this.getJSONValue(activityKey)\n        .then((data) => {\n            if (data && !decodeJSON) {\n                return JSON.stringify(data);\n            } else {\n                return data;\n            }\n        });\n    }\n\n    setActivityData(activityKey, object) {\n        return this.saveJSONValue(activityKey, object);\n    }\n\n    getRQData() {\n        let retVal = null;\n        return this.getActivityData(\"rqted\")\n        .then((rqted) => {\n            // console.log(rqted);\n            if (rqted) {\n                retVal = rqted;\n            } else {\n                // if the rq isn't selected hard-code to crystal growth\n                retVal = {\n                    moduleState: {\n                        selectedArea: { index: 1 },\n                        selectedTopic: { index: 1 },\n                        selectedVariable: { index: 1 },\n                        selectedRQ: { index: 1 }\n                    }\n                };\n            }\n            // console.log(retVal);\n            return retVal;\n        })\n        .catch((err) => {\n            console.error(err);\n            return retVal;\n        });\n    }\n\n    getCurrHypoTask() {\n        return this.getIntValue(\"currHypoTaskIdx\")\n    }\n\n    getIntialHypoData() {\n        let data = {};\n        return this.getTextValue(\"firstPrediction\")\n            .then((pred1) => {\n                // console.log(`getInitialHypoData():firstPrediction ${pred1}`);\n                if (null !== pred1) {\n                    data.firstPrediction = pred1;\n                    return this.getJSONValue(\"initialHypo\");\n                } else {\n                    data.firstPrediction = null;\n                    return null;\n                }\n            })\n            .then((initHypo) => {\n                // console.log(`getInitialHypoData():initHypo ${initHypo}`);\n                data.initialHypo = initHypo;\n                return data;\n            })\n            .catch((err) => {\n                console.error(err);\n                return data;\n            });\n    }\n\n    getFinalHypoData() {\n        let data = {};\n        return this.getTextValue(\"secondPrediction\")\n            .then((pred2) => {\n                // console.log(`getFinalHypoData():secondPrediction ${pred2}`)\n                if (null !== pred2) {\n                    data.secondPrediction = pred2;\n                    return this.getJSONValue(\"finalHypo\");\n                } else {\n                    data.secondPrediction = null;\n                    return null\n                }\n            })\n            .then((finalHypo) => {\n                // console.log(`getFinalHypoData():finalHypo ${finalHypo}`);\n                data.finalHypo = finalHypo;\n                return data;\n            })\n            .catch((err) => {\n                console.error(err);\n                return data;\n            });\n    }\n\n    setValues(object, overwrite=false) {\n        // overwrite param is ignored, as it is specific to firestore\n        return new Promise((resolve, reject) => {\n            try {\n                for (let [key, value] of Object.items(object)) {\n                    localStorage.setItem(key, value);\n                }\n                resolve(true);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    saveValue(varName, value) {\n        return new Promise((resolve, reject) => {\n            try {\n                resolve(localStorage.setItem(varName, value));\n            } catch(err) {\n                reject(err);\n            }\n        })\n    }\n\n    saveJSONValue(varName, object) {\n        return new Promise((resolve, reject) => {\n            try {\n                let value = JSON.stringify(object);\n                resolve(localStorage.setItem(varName, value));\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getBoolValue(varName) {\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (undefined === value) {\n                    resolve(value);\n                }\n                if (\"true\" === value) {\n                    resolve(true);\n                } else {\n                    resolve(false);\n                }\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getIntValue(varName) {\n        let retVal;\n        return new Promise((resolve, reject) => {\n            try {\n               let value = localStorage.getItem(varName);\n                if (value) {\n                    retVal = parseInt(value, 10);\n                }\n                resolve(retVal);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getFloatValue(varName) {\n        let retVal;\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (value) {\n                    retVal = parseFloat(value);\n                }\n                resolve(retVal);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getTextValue(varName) {\n        let retVal;\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (value) {\n                    retVal = value;\n                }\n                resolve(value);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    };\n\n    getJSONValue(varName) {\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (value) {\n                    value = JSON.parse(value);\n                }\n                resolve(value);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n};\n\n// let db = new Database(\"BOGUS_CLASS\", \"BOGUS_STUDENT\");\n\n","import { Database } from \"./database\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyD7zIk-8V20QqJNSs0cAV0uNL3qjeqLMdM\",\n    authDomain: \"isptutor.firebaseapp.com\",\n    projectId: \"isptutor\"\n};\n\nexport class FirestoreDB extends Database {\n\n    constructor() {\n        super();\n        firebase.initializeApp(firebaseConfig);\n        this.store = firebase.firestore();\n    }\n\n    setCredentials(classCode, userID) {\n        super.setCredentials(classCode, userID);\n        this.userRef = this.store.collection(this.classCode).doc(this.userID);\n    }\n\n    getUserData() {\n        // returns promise with 'doc' if it exists, null otherwise\n        return this.userRef.get()\n        .then((doc) => {\n            if (doc.exists) {\n                return doc.data;\n            } else {\n                return null;\n            }\n        });\n    }\n\n\n    getCurrHypoTask() {\n\n    }\n  \n    getActivityData(activityKey, decodeJSON=true) {\n        return this.getUserData()\n        .then((userData) => {\n            let data = userData[activityKey];\n            if (data && decodeJSON) {\n                return JSON.parse(data);\n            } else {\n                return data;\n            }\n        });\n    }\n\n    // getRQData() {\n    //     return this.getAppData(\"rqted\");\n    // }\n\n\n    // getInitialHypoData() {\n    //     return this.getAppData(\"initialHypo\")\n    //     .then((strData))\n    // }\n\n    // getFinalHypoData() {\n    //     return this.getAppData(\"finalHypo\")\n    // }\n\n    setValues(object, overwrite=false) {\n        // default to {merge: true} option for safety\n        return this.userRef.set(object, {merge: !overwrite});       \n    }\n\n    updateValues(object) {\n        return this.userRef.update(object);\n    }\n\n    deleteValue(varName) {\n        return this.userRef.update({\n            [varName]: firebase.firestore.FieldValue.delete()\n        });\n    }\n\n    // saveJSONValue(varName, value) {\n    //     return this.userRef.set({\n    //         [varName]: JSON.stringify(value)\n    //     });\n    // }\n\n    // getBoolValue(varName) {\n\n    // }\n\n    // getIntValue(varName) {\n\n    // }   \n    \n    // getFloatValue(varName) {\n\n    // }\n\n    // getTextValue(varName) {\n\n    // }\n\n    // getJSONValue(varName) {\n\n    // }\n};","import \"./index.css\";\n\n\nexport class SnackBar {\n    constructor(eleID) {\n        this.el = document.getElementById(eleID || \"snackbar\");\n    }\n\n    show(text) {\n        if (typeof(text) !== \"undefined\" && null !== text) {\n            this.el.innerHTML = text;\n            // Add the \"show\" class to DIV\n            // this.el.className = \"show\";\n            this.el.classList.add(\"show\");\n            // After 3 seconds, remove the show class from DIV\n            setTimeout(() => {\n                // snackbar.className = snackbar.className.replace(\"show\", \"\");\n                this.el.classList.remove(\"show\");\n            }, 3000);\n        }\n    }\n}\n","import { Scene } from \"@isptutorproject/scene-app-base\";\n\nexport class DiTestScene extends Scene {\n    constructor(app, sceneInfo) {\n        super(app, sceneInfo);\n        this.customActions = {\n            showBtns: this.showBtns,\n            hideBtns: this.hideBtns,\n        };\n        this.btnNames = {\n            prev: this.app.prevBtn,\n            next: this.app.nextBtn\n        };\n    }\n\n    performCustomEnterSceneActions() {\n        for (let action of this.customEnterActions) {\n            let name = action.name;\n            let args = action.args;\n            if (this.customActions.hasOwnProperty(name)) {\n                this[name](args);\n            }\n        }\n    }\n\n    defaultEnterSceneActions() {\n        super.defaultEnterSceneActions();\n        this.app.show(this.app.prevBtn);\n        this.app.show(this.app.nextBtn);\n        this.app.enable(this.app.prevBtn);\n        this.app.enable(this.app.nextBtn);\n    }\n\n}\n","export class Scene {\n    constructor(app, sceneInfo) {\n        console.debug(`\\tInitializing Scene: ${sceneInfo.id}`);\n        this.app = app;\n        // copy all sceneInfo to 'this'\n        for (let [k, v] of Object.entries(sceneInfo)) {\n            this[k] = v;\n        }\n        this.el = document.getElementById(this.id);\n        // bind event handler\n        this.handleFollowEdgeButton = this.handleFollowEdgeButton.bind(this);\n    }\n\n    showBtns(btnNames) {\n        for (let btnName of btnNames) {\n            if (this.btnNames.hasOwnProperty(btnName)) {\n                this.app.show(this.btnNames[btnName]);\n            }\n        }\n    }\n\n    hideBtns(btnNames) {\n        for (let btnName of btnNames) {\n            if (this.btnNames.hasOwnProperty(btnName)) {\n                this.app.hide(this.btnNames[btnName]);\n            }\n        }\n    }\n\n\n    handleFollowEdgeButton(e) {\n        e.preventDefault();\n        let edgeName = e.target.dataset.edge;\n        this.app.followEdge(edgeName);\n    }\n\n    getFollowEdgeElements() {\n        return this.el.getElementsByClassName(\"follow-edge\");\n    }\n\n    setupFollowEdgeEventHandlers() {\n        for (let el of this.getFollowEdgeElements()) {\n            el.addEventListener(\n                \"click\", this.handleFollowEdgeButton, { once: true }\n            );\n        }\n    }\n\n    restoreState(value) {\n        if (typeof (value) !== \"undefined\") {\n            console.debug(`\\tRestoring Scene State for: ${this.id} `);\n            return true;\n        }\n        return false;\n    }\n\n    _isBogus() {\n        return this.id === \"N/A\" || this.sceneType === \"bogus\";\n    }\n\n    handlePrevButton() {\n        this.app.followEdge(\"prev\");\n    }\n\n    handleNextButton() {\n        this.app.followEdge(\"next\");\n    }\n\n    hasForm() {\n        return false;\n    }\n\n    formChanged() {\n        return false;\n    }\n\n    pre_enter() {\n\n    }\n\n    enter() {\n        if (this._isBogus()) {\n            return;\n        }\n        console.debug(`Entering Scene: ${this.id}`);\n        console.debug(\"\\tUpdating state.currentScene\");\n        this.app.state.currentScene = this.id;\n        this.defaultEnterSceneActions();\n        if (this.customEnterActions.length) {\n            this.performCustomEnterSceneActions();\n        }\n    }\n\n    post_enter() {\n\n    }\n\n    pre_exit() {\n\n    }\n\n    exit() {\n        if (this._isBogus()) {\n            return;\n        }\n        console.debug(`Exiting Scene: ${this.id}`);\n        this.defaultExitSceneActions();\n        if (this.customExitActions.length) {\n            this.performCustomExitSceneActions();\n        }\n    }\n\n    post_exit() {\n\n    }\n\n    defaultEnterSceneActions() {\n        this.el.classList.add(\"active\");\n        this.setupFollowEdgeEventHandlers();\n    }\n\n    defaultExitSceneActions() {\n        this.el.classList.remove(\"active\");\n    }\n\n    performCustomEnterSceneActions() {\n        console.warn(\"Unimplemented Method: performCustomEnterSceneActions\");\n    }\n\n    performCustomExitSceneActions() {\n        console.warn(\"Unimplemented Method: performCustomExitSceneActions\");\n    }\n}\n","export class RadioButtonForm {\n    constructor(app, formInfo, eleId) {\n        this.handleChange = this.handleChange.bind(this);\n        this.app = app;\n        this.formInfo = formInfo;\n        this.form = document.getElementById(eleId);\n        this.radios = this.form.querySelectorAll('input[type=\"radio\"]');\n        this.changed = false;\n    }\n\n    isValid() {\n        const validity = this.form.checkValidity();\n        // console.log(\"form is valid:\", validity);\n        return validity;\n    }\n\n    handleChange(e) {\n        // set form to dirty state so it will get saved later on\n        this.changed = true;\n        if (this.isValid()) {\n            this.app.enable(this.app.nextBtn);\n        }\n    }\n\n    setupEventHandlers() {\n        for (let rb of this.radios) {\n            rb.addEventListener('change', this.handleChange);\n        }\n    }\n\n    teardownEventHandlers() {\n        for (let rb of this.radios) {\n            rb.removeEventListener('change', this.handleChange);\n        }\n    }\n\n\n    getCorrectness() {\n        let sfi = this.formInfo;\n        let selectedAnswer = this.form.querySelector(\n            'input[type=\"radio\"]:checked'\n        )\n        let val = selectedAnswer.value.trim();\n        // let ansText = selectedAnswer.labels[0].innerText;\n        let correctAnswer = sfi.correctAnswer;\n        let isCorrect;\n\n        if (\"N/A\" === correctAnswer) {\n            isCorrect = null;\n        } else if (correctAnswer === val) {\n            isCorrect = true;\n        } else {\n            isCorrect = false;\n        }\n        return isCorrect;\n    }\n\n    getFeedback() {\n        let isCorrect = this.getCorrectness();\n        let sfi = this.formInfo;\n        // console.log(isCorrect, sfi);\n        let fbText, fbClassName, fbMsg;\n        switch(isCorrect) {\n            case true:\n                fbText = sfi.posFb;\n                fbClassName = \"pos-feedback\";\n                break;\n            case false:\n                fbText = sfi.negFb;\n                fbClassName = \"neg-feedback\";\n                break;\n            default:\n                fbText = sfi.ntlFb;\n                fbClassName = \"ntl-feedback\";\n        }\n        if (typeof(fbText) === \"undefined\") {\n            if (typeof(sfi.ntlFb) !== \"undefined\") {\n                fbText = sfi.ntlFb;\n            }\n        }\n        if (typeof (fbText) !== \"undefined\") {\n            fbMsg = `<span class=\"${fbClassName}\">${fbText}</span>`;\n        }\n        return fbMsg;\n    }\n\n    getData() {\n        let sfi = this.formInfo;\n        let isCorrect = this.getCorrectness();\n        let selectedAnswer = this.form.querySelector(\n            'input[type=\"radio\"]:checked'\n        );\n        let val = selectedAnswer.value.trim();\n        let lbl = selectedAnswer.labels[0].innerText;\n        let formData = {\n            questionType: sfi.type,\n            questionText: sfi.text,\n            selectedEleId: selectedAnswer.id,\n            selectedValue: val,\n            selectedLabel: lbl,\n            isCorrect: isCorrect,\n            timestamp: Date.now()\n        }\n        // set form to non-dirty state, so we don't resubmit unless they\n        // change again\n        this.changed = false;\n        return formData;\n    }\n\n}","export class TextareaForm {\n    constructor(app, formInfo, eleId) {\n        this.handleChange = this.handleChange.bind(this);\n        this.app = app;\n        this.formInfo = formInfo;\n        this.form = document.getElementById(eleId);\n        console.log(this.form);\n        this.textarea = this.form.querySelector('.form-control');\n        this.changed = false;\n    }\n\n    isValid() {\n        const validity = this.form.checkValidity();\n        // console.log(\"form is valid:\", validity);\n        return validity;\n    }\n\n    handleChange(e) {\n        // set form to dirty state so it will get saved later on\n        if (this.textarea.value.trim() != \"\") {\n            this.changed = true;\n            // console.log(this.getData());\n            if (this.isValid()) {\n                this.app.enable(this.app.nextBtn);\n            }\n        }\n    }\n\n    setupEventHandlers() {\n        // for (let rb of this.radios) {\n        //     rb.addEventListener('change', this.handleChange);\n        // }\n        this.textarea.addEventListener(\"input\", this.handleChange);\n    }\n\n    teardownEventHandlers() {\n        // for (let rb of this.radios) {\n        //     rb.removeEventListener('change', this.handleChange);\n        // }\n        this.textarea.removeEventListener(\"input\", this.handleChange);\n    }\n\n\n    getCorrectness() {\n        // let sfi = this.formInfo;\n        // let selectedAnswer = this.form.querySelector(\n        //     'input[type=\"radio\"]:checked'\n        // )\n        // let val = selectedAnswer.value.trim();\n        // // let ansText = selectedAnswer.labels[0].innerText;\n        // let correctAnswer = sfi.correctAnswer;\n        // let isCorrect;\n\n        // if (\"N/A\" === correctAnswer) {\n        //     isCorrect = null;\n        // } else if (correctAnswer === val) {\n        //     isCorrect = true;\n        // } else {\n        //     isCorrect = false;\n        // }\n        // return isCorrect;\n        return null;\n    }\n\n    getFeedback() {\n        // let isCorrect = this.getCorrectness();\n        let sfi = this.formInfo;\n        // // console.log(isCorrect, sfi);\n        let fbText, fbClassName, fbMsg;\n        // switch (isCorrect) {\n        //     case true:\n        //         fbText = sfi.posFb;\n        //         fbClassName = \"pos-feedback\";\n        //         break;\n        //     case false:\n        //         fbText = sfi.negFb;\n        //         fbClassName = \"neg-feedback\";\n        //         break;\n        //     default:\n        //         fbText = sfi.ntlFb;\n        //         fbClassName = \"ntl-feedback\";\n        // }\n        // if (typeof (fbText) === \"undefined\") {\n        if (typeof (sfi.ntlFb) !== \"undefined\") {\n            fbText = sfi.ntlFb;\n            fbClassName = \"ntl-feedback\";\n        }\n        // }\n        if (typeof (fbText) !== \"undefined\") {\n            fbMsg = `<span class=\"${fbClassName}\">${fbText}</span>`;\n        }\n        return fbMsg;\n    }\n\n    getData() {\n        let sfi = this.formInfo;\n        let isCorrect = this.getCorrectness();\n        // let selectedAnswer = this.form.querySelector(\n        //     'input[type=\"radio\"]:checked'\n        // );\n        // let val = selectedAnswer.value.trim();\n        // let lbl = selectedAnswer.labels[0].innerText;\n        let answer = this.textarea.value.trim();\n        let formData = {\n            questionType: sfi.type,\n            questionText: sfi.text,\n            // selectedEleId: selectedAnswer.id,\n            // selectedValue: val,\n            // selectedLabel: lbl,\n            answer: answer,\n            isCorrect: isCorrect,\n            timestamp: Date.now()\n        }\n        // set form to non-dirty state, so we don't resubmit unless they\n        // change again\n        this.changed = false;\n        return formData;\n    }\n\n    // getFormData() {\n\n    // }\n\n    // handleFormSubmit(e) {\n    //     e.preventDefault();\n\n    //     if (this.form.checkValidity()) {\n\n    //         let fbText;\n    //         let fbClassName;\n\n    //         if (\"n/a\" === correctAnswer) {\n    //             isCorrect = null;\n    //             fbText = sfi.ntlFb;\n    //             fbClassName = \"ntl-feedback\";\n    //         } else if (correctAnswer === val) {\n    //             isCorrect = true;\n    //             fbText = sfi.posFb;\n    //             fbClassName = \"pos-feedback\";\n    //         } else {\n    //             isCorrect = false;\n    //             fbText = sfi.negFb;\n    //             fbClassName = 'neg-feedback';\n    //         }\n\n    //         if (!fbText) {\n    //             fbText = sfi.ntlFb;\n    //             fbClassName = 'ntl-feedback';\n    //         }\n\n    //         this.app.showFeedback(fbMsg);\n    //         // what we want to store in firestore\n    // }\n    //         console.log(log);\n\n    //     } else {\n    //         let fbMsg = `<span class=\"text-danger\">Please select an option</span>`;\n    //         this.app.showFeedback(fbMsg);\n    //     }\n    // }\n\n}","import { DiTestScene } from \"./testScene\";\n\nimport { RadioButtonForm } from \"@isptutorproject/scene-app-base/radio-button-form\";\nimport { TextareaForm } from \"@isptutorproject/scene-app-base/textarea-form\";\n\nconst FIRST_TRANSITION = 0;\nconst LAST_TRANSITION = 2;\n\nexport class DiTestResultsScene extends DiTestScene {\n    constructor(app, sceneInfo) {\n        super(app, sceneInfo);\n        this.q1Answer = null;\n        // default to the first transition\n        this.currentTransition = FIRST_TRANSITION;\n        this.currentTransitionStateSaver = null;\n        this.currentState = null;\n\n        this.saveQ1State = this.saveQ1State.bind(this);\n        this.saveQ2State = this.saveQ2State.bind(this);\n        this.saveQ3State = this.saveQ3State.bind(this);\n        this.revealStatHandler = this.revealStatHandler.bind(this);\n        this.handleSortData = this.handleSortData.bind(this);\n\n        this.showSortedDataBtn = document.getElementById(`${this.id}_show_sorted_table`);\n        this.sortedTableText    = document.getElementById(`${this.id}_sorted_text`);\n\n        // this.sortedImg   = document.getElementById(`${this.id}_sorted`);\n        // this.unsortedImg = document.getElementById(`${this.id}_unsorted`);\n\n        this.q2TextArea = document.getElementById(`${this.id}_q2_answer`);\n        this.currentForm = null;\n        this.q1Form = new RadioButtonForm(\n            this.app, sceneInfo.questions.q1, `${this.id}_q1_form`\n        );\n        this.q2Form = new TextareaForm(\n            this.app, sceneInfo.questions.q2, `${this.id}_q2_form`\n        );\n        this.q3Form = new RadioButtonForm(\n            this.app, sceneInfo.questions.q3, `${this.id}_q3_form`\n        );\n        this.forms = [\n            this.q1Form,\n            this.q2Form,\n            this.q3Form\n        ];\n        this.q2Text = document.getElementById(`${this.id}_q2_text`);\n        this.q3Text = document.getElementById(`${this.id}_q3_text`);\n\n        this.setupEventHandlers();\n    }\n\n    restoreState(sceneState) {\n        super.restoreState(sceneState);\n        if (sceneState) {\n            console.log(\"TestResultsScene::restoreState()\");\n            this.currentState = sceneState;\n\n            if (sceneState.currentTransition) {\n                this.currentTransition = sceneState.currentTransition;\n            }\n            if (sceneState.q1Selection) {\n                let el = document.getElementById(sceneState.q1Selection);\n                el.checked = true;\n                // something is very wrong if we don't have both q1Selection\n                // and a1Answer stored\n                this.q1Answer = sceneState.q1Answer;\n                this.updateQ2AndQ3Text();\n            }\n            if (sceneState.q2Answer) {\n                this.q2TextArea.value = sceneState.q2Answer;\n            }\n            if (sceneState.q3Selection) {\n                let el = document.getElementById(sceneState.q3Selection);\n                el.checked = true;\n            }\n            for (let side of [\"left\", \"right\"]) {\n                for (let stat of [\"mean\", \"median\", \"mode\", \"range\"]) {\n                    if (sceneState[`${side}_${stat}_shown`]) {\n                        this.revealStat(side, stat);\n                    }\n                }\n            }\n\n            if (sceneState.dataSorted) {\n                this.showSortedData();\n                this.replaceSortBtnWithText();\n            }\n        }\n    }\n\n    updateSceneState(diff) {\n        if (null === this.currentState) {\n            this.currentState = {};\n        }\n        this.currentState = Object.assign(this.currentState, diff);\n        // console.log(this.currentState);\n        this.app.state.sceneState[this.id] = Object.assign({}, this.currentState);\n    }\n\n    revealStat(side, stat) {\n        let btnEl  = document.getElementById(`${this.id}_reveal_${side}_${stat}`);\n        let statEl = document.getElementById(`${this.id}_${side}_${stat}`);\n        this.app.hide(btnEl);\n        this.app.show(statEl);\n    }\n\n\n    replaceSortBtnWithText() {\n        this.app.hide(this.showSortedDataBtn);\n        this.app.show(this.sortedTableText);\n    }\n\n    revealStatHandler(e) {\n        let [_1, _2, side, stat] = e.target.id.replace(this.id, \"\").split(\"_\");\n        this.revealStat(side, stat);\n        this.updateSceneState({ [`${side}_${stat}_shown`]: true })\n        this.app.state.events.push({\n            type: 'REVEAL_STAT',\n            side: side,\n            stat: stat,\n            time: Date.now()\n        });\n    }\n\n    handleSortData(e) {\n        this.showSortedData();\n        this.replaceSortBtnWithText();\n        this.app.state.events.push({\n            type: \"DATA_SORTED\",\n            time: Date.now()\n        });\n        this.updateSceneState({\"dataSorted\": true});\n    }\n\n    hideAllForms() {\n        for (let f of this.forms) {\n            this.app.hide(f.form);\n        }\n    }\n\n    handlePrevButton() {\n        if (this.currentForm.changed) {\n            this.currentTransitionStateSaver(this.currentForm.getData());\n        }\n        if (FIRST_TRANSITION === this.currentTransition) {\n            this.app.followEdge(\"prev\");\n        } else {\n            this.currentTransition--;\n            this.handleTransition();\n        }\n    }\n\n    handleNextButton() {\n        if (this.currentForm.changed) {\n            this.currentTransitionStateSaver(this.currentForm.getData());\n        }\n        if (LAST_TRANSITION === this.currentTransition) {\n            this.app.followEdge(\"next\");\n        } else {\n            this.currentTransition++;\n            this.handleTransition();\n        }\n    }\n\n    hasForm() {\n        return true;\n    }\n\n    setupEventHandlers() {\n        for (let btn of this.el.querySelectorAll(\".reveal-stat\")) {\n            btn.addEventListener(\"click\", this.revealStatHandler, {once: true});\n        }\n        this.showSortedDataBtn.addEventListener(\n            \"click\", this.handleSortData, { once: true }\n        );\n    }\n\n    updateQ2AndQ3Text() {\n        let phRepl = `<span class=\"q1-answer\">${this.q1Answer}</span>`;\n        this.questions.q2.text = this.questions.q2.text.replace(\n            \"PLACEHOLDER\", phRepl\n        );\n        this.questions.q3.text = this.questions.q3.text.replace(\n            \"PLACEHOLDER\", phRepl\n        );\n        this.q2Text.innerHTML = this.questions.q2.text;\n        this.q3Text.innerHTML = this.questions.q3.text;\n    }\n\n    saveQ1State(data) {\n        this.q1Answer = data.selectedValue;\n        this.updateSceneState({\n            \"q1Selection\": data.selectedEleId,\n            \"q1Answer\": this.q1Answer,\n        });\n        this.updateQ2AndQ3Text();\n        this.submitQuestion(\"q1\", data);\n    }\n\n    saveQ2State(data) {\n        this.updateSceneState({q2Answer: data.answer});\n        data.questionText = data.questionText\n            .replace('<span class=\"q1-answer\">', '')\n            .replace('</span>', '');\n        this.submitQuestion(\"q2\", data);\n    }\n\n    saveQ3State(data) {\n        this.updateSceneState({q3Selection: data.selectedEleId});\n        data.questionText = data.questionText\n            .replace('<span class=\"q1-answer\">', '')\n            .replace('</span>', '');\n        this.submitQuestion(\"q3\", data);\n    }\n\n\n    submitQuestion(qNum, data) {\n        let logData = Object.assign(\n            {\n                type: \"SUBMIT_ANSWER\",\n                questionId: `${this.app.activityKey}.${this.id}.${qNum}`\n            },\n            data\n        );\n        this.app.state.events.push(logData);\n    }\n\n    defaultEnterSceneActions() {\n        super.defaultEnterSceneActions();\n        // I *believe* these next 4 are handle by superclass and can go away\n        this.app.show(this.app.prevBtn);\n        this.app.show(this.app.nextBtn);\n        this.app.enable(this.app.prevBtn);\n        this.app.enable(this.app.nextBtn);\n        this.q1Form.setupEventHandlers();\n        this.q2Form.setupEventHandlers();\n        this.q3Form.setupEventHandlers();\n    }\n\n    handleTransition() {\n        // console.log(\"TestResultsScene.handleTransition()\");\n        // console.log(this.currentTransition);\n        this.hideAllForms();\n        this.currentForm = this.forms[this.currentTransition];\n        this.app.show(this.currentForm.form);\n        if (!this.currentForm.isValid()) {\n            this.app.disable(this.app.nextBtn);\n        } else {\n            this.app.enable(this.app.nextBtn);\n        }\n        switch (this.currentTransition) {\n            case 0:\n                this.currentTransitionStateSaver = this.saveQ1State;\n                break;\n            case 1:\n                this.currentTransitionStateSaver = this.saveQ2State;\n                this.q2TextArea.focus();\n                break;\n            case 2:\n                this.currentTransitionStateSaver = this.saveQ3State;\n                break;\n            default:\n                console.error(`invalid transition: ${this.currentTransition}`);\n        }\n    }\n\n    post_enter() {\n        // console.log(\"TestResultsScene.post_enter()\");\n        // console.log(this.forms);\n        this.handleTransition();\n        if (null !== this.currentState) {\n            this.restoreState(this.currentState);\n        }\n    }\n\n    // teardownAllFormEventHandlers() {\n    //     for (let f of this.forms) {\n    //         f.teardownEventHandlers();\n    //     }\n    // }\n}\n\n","import { DiTestResultsScene } from \"./testResultsScene\";\n\nexport class DiSingleTableResultsScene extends DiTestResultsScene {\n    constructor(app, sceneInfo) {\n        super(app, sceneInfo);\n        this.showSortedData = this.showSortedData.bind(this);\n    }\n\n    _sortTable(table) {\n        // grabs column values from tbody rows, sorts them independently\n        // and then re-adds them as sorted rows using the column arrays\n        let tbody = table.querySelector(\"tbody\");\n        let rows = [...tbody.rows];\n        tbody.innerHTML = \"\";\n        let col1Vals = rows.map((tr) => {\n            return parseFloat(tr.querySelectorAll(\"td\")[0].innerText);\n        });\n        let col2Vals = rows.map((tr) => {\n            return parseFloat(tr.querySelectorAll(\"td\")[1].innerText);\n        });\n        col1Vals.sort((a, b) => a - b);\n        col2Vals.sort((a, b) => a - b);\n        for (let i = 0; i < col1Vals.length; i++) {\n            let tr = document.createElement(\"tr\");\n            let col1 = document.createElement(\"td\");\n            let col2 = document.createElement(\"td\");\n            col1.innerText = col1Vals[i];\n            col2.innerText = col2Vals[i];\n            tr.appendChild(col1);\n            tr.appendChild(col2)\n            tbody.appendChild(tr);\n        }\n    }\n    showSortedData() {\n        let table = this.el.querySelector(\"table.data-table.center-table\");\n        this._sortTable(table)\n    }\n}\n\n","import { DiTestResultsScene } from \"./testResultsScene\";\n\nexport class DiDualTableResultsScene extends DiTestResultsScene {\n    constructor(app, sceneInfo) {\n        super(app, sceneInfo);\n        this.showSortedData = this.showSortedData.bind(this);\n    }\n\n    _compareRows(a, b) {\n        // compares 2nd column of rows as integers\n        let a1 = parseFloat(a.querySelectorAll(\"td\")[1].innerText);\n        let b1 = parseFloat(b.querySelectorAll(\"td\")[1].innerText);\n        return a1 - b1;\n    }\n\n    _sortTable(table) {\n        let tbody = table.querySelector(\"tbody\");\n        let rows = [...tbody.rows];\n        tbody.innerHTML = \"\";\n        rows.sort(this._compareRows);\n        for (let row of rows) {\n            tbody.appendChild(row);\n        }\n    }\n\n    showSortedData() {\n        let leftTable = this.el.querySelector(\"table.data-table.left-table\");\n        let rightTable = this.el.querySelector(\"table.data-table.right-table\");\n        this._sortTable(leftTable);\n        this._sortTable(rightTable);\n    }\n\n\n}\n","\nimport \"./index.scss\";\n\nimport { NavBar } from \"@isptutorproject/navbar\";\n\nimport { SceneBasedApp } from \"@isptutorproject/scene-app-base\";\nimport {\n    DiTestScene,\n    DiDualTableResultsScene,\n    DiSingleTableResultsScene\n} from \"./scenes\";\n\nexport class DiTestApp extends SceneBasedApp{\n\n    createScene(sceneInfo) {\n        let scene;\n        switch(sceneInfo.sceneType) {\n            case \"carResults\":\n            case \"rocketsResults\":\n                scene = new DiSingleTableResultsScene(this, sceneInfo);\n                break;\n            case \"libraryResults\":\n            case \"memoryResults\":\n                scene = new DiDualTableResultsScene(this, sceneInfo);\n                break;\n            default:\n                scene = new DiTestScene(this, sceneInfo);\n\n        }\n        return scene;\n    }\n\n\n}","import { getDBConnection } from \"@isptutorproject/isp-database\";\nimport { SnackBar} from \"@isptutorproject/snackbar\";\n\nexport class SceneBasedApp {\n    constructor(appData, activityConfig, defaultInitialState) {\n        this.sceneData = appData.scenes;\n        this.activityConfig = activityConfig;\n        this.db = getDBConnection(activityConfig.database);\n        this.db.setCredentials(activityConfig.classCode, activityConfig.userID);\n        this.activityKey = activityConfig.activityKey;\n        this.defaultState = defaultInitialState;\n\n        this.snackbar = new SnackBar();\n        this.homePageBtn = null;\n        let homePageBtn  = document.getElementById(\"go_home_page\");\n        this.nextBtn = document.getElementById(\"next_btn\");\n        this.prevBtn = document.getElementById(\"prev_btn\");\n        this.sceneIdRegion = document.getElementById(\"scene_id_region\");\n        if (homePageBtn) {\n            this.homePageBtn = homePageBtn;\n        }\n        this.handleGoHomePage = this.handleGoHomePage.bind(this);\n        this.handleNext = this.handleNext.bind(this);\n        this.handlePrev = this.handlePrev.bind(this);\n        if (this.homePageBtn) {\n            this.homePageBtn.addEventListener(\"click\", this.handleGoHomePage);\n        }\n        this.nextBtn.addEventListener(\"click\", this.handleNext);\n        this.prevBtn.addEventListener(\"click\", this.handlePrev);\n\n        this.state = {};\n        this.scenes = {};\n        this.startScene = \"start\";\n        this.currentScene = null;\n        this.prevScene = null;\n        // is this needed???\n        this.bogusSceneInfo = {\n            id: \"N/A\",\n            sceneType: \"bogus\"\n        };\n        window.app = this;\n    }\n\n\n    // setSnackbar(snackbar) {\n    //     this.snackbar = snackbar;\n    // }\n\n    showFeedback(feedback) {\n        this.snackbar.show(feedback);\n    }\n\n    handleGoHomePage(event) {\n        event.preventDefault();\n        window.location.href = this.activityConfig.homepage\n    }\n\n    handlePrev(event) {\n        event.preventDefault();\n        this.currentScene.handlePrevButton();\n        this.saveAppState();\n    }\n\n    handleNext(event) {\n        event.preventDefault();\n        this.currentScene.handleNextButton();\n        this.saveAppState();\n    }\n\n    setStartScene(sceneId) {\n        console.debug(\"setStartScene()\", sceneId);\n        this.startScene = sceneId;\n    }\n\n    start() {\n        console.log(\"starting\");\n        this.getAppState()\n            .then((state) => {\n                if (null === state) {\n                    console.log(\"no activity data in db. using initial data\")\n                    state = this.defaultState;\n                }\n                this.state = state;\n                return;\n            })\n            .then(() => {\n                console.log(\"Initializing Scenes\");\n                for (let section of document.querySelectorAll(\"section.scene\")) {\n                    let sceneId = section.id;\n                    // console.log(`creating scene for ${sceneId}`);\n                    let sceneObj = this.createScene(this.sceneData[sceneId]);\n                    // console.log(sceneObj);\n                    this.scenes[sceneId] = sceneObj;\n                }\n                return;\n            })\n            .then(() => {\n                console.log(this.state);\n                console.log(this.state.sceneState);\n                console.log(\"Restoring App State\")\n                for (let section of document.querySelectorAll(\"section.scene\")) {\n                    let sceneId = section.id;\n                    let sceneState = this.state.sceneState[sceneId];\n                    this.scenes[sceneId].restoreState(sceneState);\n                }\n                if (this.state.currentScene) {\n                    console.log(\"Restoring Current Scene\");\n                    this.currentScene = this.lookupScene(this.state.currentScene);\n                }\n                return;\n            })\n            .then(() => {\n                // console.debug(this.sceneData);\n                // console.log(this.scenes);\n            })\n            .then(() => {\n                this.gotoStartScene();\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n    }\n\n    getAppState() {\n        console.debug(\"Loading App State\");\n        return this.db.getActivityData(this.activityKey);\n    }\n\n    saveAppState() {\n        console.debug(\"Saving App State\");\n        return this.db.setActivityData(this.activityKey, this.state);\n    }\n\n    createScene(sceneInfo) {\n        // you'll want to override this to do anything useful\n        // console.debug(\"createScene()\", sceneInfo, sceneState);\n        return new Scene(this, sceneInfo);\n    }\n\n    switchToScene(scene) {\n        this.logSceneChange(scene);\n        this.gotoScene(scene);\n    }\n\n    gotoScene(scene) {\n        this.prevScene = this.currentScene;\n        if (this.prevScene) {\n            this.prevScene.pre_exit();\n            this.prevScene.exit();\n            this.prevScene.post_exit();\n        }\n        this.currentScene = scene;\n        this.currentScene.pre_enter();\n        this.currentScene.enter();\n        this.currentScene.post_enter();\n        // delete this.prevScene;\n        this.displaySceneId();\n    }\n\n    displaySceneId() {\n        if (process.env.NODE_ENV === \"development\") {\n            this.sceneIdRegion.innerHTML = this.currentScene.id;\n        }\n    }\n\n    lookupScene(sceneId) {\n        let scene = this.scenes[sceneId];\n        if (!scene) {\n            console.error(`ERROR: no such scene ${sceneId}`);\n        }\n        return scene;\n    }\n\n    followEdge(edgeName) {\n        let newSceneId = this.currentScene.edges[edgeName];\n        let newScene = this.lookupScene(newSceneId);\n        this.switchToScene(newScene);\n    }\n\n    logSceneChange(scene) {\n        this.state.events.push({\n            type: \"SCENE_TRANSITION\",\n            from: this.currentScene.id,\n            to: scene.id,\n            timestamp: Date.now()\n        });\n        // console.debug(\"Updating state.events\");\n    }\n\n\n    gotoStartScene() {\n        // bypasses switchToScene() and thus logSceneChange()\n        // this.currentScene = null;\n        let startScene = this.currentScene;\n        if (!startScene) {\n            startScene = this.lookupScene(this.startScene);\n        }\n        this.state.events.push({\n            type: \"APP_START\",\n            scene:  startScene.id,\n            timestamp: Date.now()\n        });\n        // console.debug(\"Updating state.events\");\n        this.gotoScene(startScene);\n    }\n\n\n    hide(el) {\n        if (el) { el.classList.add(\"hidden\"); }\n    }\n\n    show(el) {\n        if (el) { el.classList.remove(\"hidden\"); }\n    }\n\n    makeInvisible(el) {\n        if (el) {\n            el.classList.add(\"invisible\");\n        }\n    }\n\n    makeVisible(el) {\n        if (el) {\n            el.classList.remove(\"invisible\");\n        }\n    }\n\n    disable(el) {\n        if (el) {\n            // console.log(\"disabling:\", el);\n            el.classList.add(\"disabled\");\n        } else {\n            // console.log(\"not disabling non-existinant element:\", el);\n        }\n    }\n\n    enable(el) {\n        if (el) {\n            // console.log(\"disabling:\", el);\n            el.classList.remove(\"disabled\");\n        } else {\n            // console.log(\"not disabling non-existinant element:\", el);\n        }\n    }\n}\n","import { LocalStorageDB } from \"./localStorageDB\";\nimport { FirestoreDB } from \"./firestoreDB\";\n\nexport function getDBConnection(dbType) {\n    let db;\n    switch(dbType) {\n        case \"firestore\":\n            db = new FirestoreDB();\n            break;\n        default:\n            db = new LocalStorageDB();\n    }\n    return db; \n}\n","import { DiTestApp } from \"./index\";\nimport { NavBar } from \"@isptutorproject/navbar\";\n\nimport { getActivityConfiguration } from \"@isptutorproject/activity-config\";\n\nconst DEFAULT_APP_INITIAL_STATE = {\n    events: [],\n    // mapping of sceneIDs -> scene-type specific data\n    sceneState: {},\n    currentScene: \"start\"\n};\n\n\nlet activityConfig = getActivityConfiguration();\nconst activityData = require(\"../data/diPostTest.json\");\n\nlet navbar = new NavBar();\nnavbar.displayActivityTitle(\"Data Interpretation Post-Test\");\nnavbar.displayUser(activityConfig.userID);\n\n\nlet app = new DiTestApp(\n    activityData, activityConfig, DEFAULT_APP_INITIAL_STATE\n);\nif (process.env.NODE_ENV === \"development\") {\n    app.setStartScene(\"start\");\n}\napp.start();\n"],"sourceRoot":""}