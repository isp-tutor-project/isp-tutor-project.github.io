{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////home/ckot/projects/work/isptutorproject_website/common/navbar/index.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/activity-config/index.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/database.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/localStorageDB.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/firestoreDB.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/snackbar/index.js","webpack:///./src/scenes/testScene.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/scene-app-base/scene.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/scene-app-base/radio-button-form.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/scene-app-base/textarea-form.js","webpack:///./src/scenes/testResultsScene.js","webpack:///./src/index.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/scene-app-base/app.js","webpack:////home/ckot/projects/work/isptutorproject_website/common/isp-database/index.js","webpack:///./src/pretest.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","NavBar","this","el","document","querySelector","userInfoRegion","getElementById","activityTitle","activitySection","signOutBtn","signInText","signOutUser","addEventListener","e","classList","add","homePage","localStorage","getItem","window","location","origin","clear","href","title","innerText","section","userName","innerHTML","remove","getActivityConfiguration","activityConfig","userID","classCode","database","homepage","activityKey","features","split","filter","item","console","log","Database","decodeJSON","varName","super","setCredentials","count","data","Promise","all","getTextValue","getActivityData","getCurrHypoTask","getIntialHypoData","getFinalHypoData","then","ccRes","uidRes","rqRes","chtRes","ihRes","fhRes","rqted","currHypoTaskIdx","firstPrediction","initialHypo","secondPrediction","finalHypo","getJSONValue","JSON","stringify","saveJSONValue","retVal","moduleState","selectedArea","index","selectedTopic","selectedVariable","selectedRQ","catch","err","error","getIntValue","pred1","initHypo","pred2","overwrite","resolve","reject","items","setItem","undefined","parseInt","parseFloat","parse","firebaseConfig","apiKey","authDomain","projectId","firebase","initializeApp","store","firestore","userRef","collection","doc","exists","getUserData","userData","set","merge","update","FieldValue","delete","SnackBar","eleID","text","setTimeout","app","sceneInfo","debug","id","k","v","entries","handleFollowEdgeButton","btnNames","btnName","show","hide","preventDefault","edgeName","target","dataset","edge","followEdge","getElementsByClassName","getFollowEdgeElements","once","sceneType","_isBogus","state","currentScene","defaultEnterSceneActions","customEnterActions","length","performCustomEnterSceneActions","defaultExitSceneActions","customExitActions","performCustomExitSceneActions","setupFollowEdgeEventHandlers","warn","customActions","showBtns","hideBtns","prev","prevBtn","next","nextBtn","action","args","RadioButtonForm","formInfo","eleId","handleChange","form","radios","querySelectorAll","changed","checkValidity","isValid","enable","rb","removeEventListener","isCorrect","sfi","val","trim","correctAnswer","fbText","fbClassName","fbMsg","getCorrectness","posFb","negFb","ntlFb","selectedAnswer","lbl","labels","formData","questionType","type","questionText","selectedEleId","selectedValue","selectedLabel","timestamp","Date","now","TextareaForm","textarea","answer","q1Answer","currentTransition","currentTransitionStateSaver","currentState","saveQ1State","saveQ2State","saveQ3State","handleShowLeftMean","handleShowRightMean","handleShowSortedTable","side","leftMeanBtn","leftMeanValue","rightMeanBtn","rightMeanValue","showSortedTableBtn","sortedTableText","sortedImg","unsortedImg","q2TextArea","currentForm","q1Form","questions","q1","q2Form","q2","q3Form","q3","forms","q2Text","q3Text","setupEventHandlers","sceneState","restoreState","q1Selection","checked","updateQ2AndQ3Text","q2Answer","q3Selection","leftMeanShown","showMean","rightMeanShown","sortedTableShown","showSortedTable","diff","assign","which","updateSceneState","f","getData","handleTransition","phRepl","replace","submitQuestion","qNum","logData","action_type","questionId","hideAllForms","disable","focus","self","appData","defaultInitialState","sceneData","scenes","db","dbType","getDBConnection","defaultState","snackbar","homePageBtn","sceneIdRegion","handleGoHomePage","handleNext","handlePrev","startScene","prevScene","bogusSceneInfo","feedback","event","handlePrevButton","saveAppState","handleNextButton","sceneId","getAppState","sceneObj","createScene","lookupScene","gotoStartScene","setActivityData","Scene","scene","logSceneChange","gotoScene","pre_exit","exit","post_exit","pre_enter","enter","post_enter","displaySceneId","newSceneId","edges","newScene","switchToScene","from","to","events","push","activityData","navbar","displayActivityTitle","displayUser","start"],"mappings":"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","file":"dipretest.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","import \"./index.css\";\n\nexport class NavBar {\n    constructor() {\n        this.el = document.querySelector(\"nav.navbar\");\n        this.userInfoRegion = document.getElementById(\"user_info_region\");\n        this.activityTitle = document.getElementById(\"activity_title\");\n        this.activitySection = document.getElementById(\"activity_section\");\n        this.signOutBtn = document.getElementById(\"sign_out_button\");\n        this.signInText = document.getElementById(\"sign_in_text\");\n        this.signOutUser = this.signOutUser.bind(this);\n        // this.logoutHandler = logoutHandler;\n        this.signOutBtn.addEventListener(\"click\", this.signOutUser);\n    }\n\n    signOutUser(e) {\n        this.userInfoRegion.classList.add(\"invisible\");\n        let homePage = localStorage.getItem(\"homepage\");\n        if (null === homePage) {\n            homePage = window.location.origin + \"/\";\n        }\n        localStorage.clear();\n        window.location.href = homePage;\n    }\n\n    displayActivityTitle(title) {\n        this.activityTitle.innerText = title;\n    }\n\n    displayActivitySection(section) {\n        this.activitySection.innerText = section;\n    }\n\n    displayUser(userName) {\n        this.signInText.innerHTML = `Welcome, ${userName}`;\n        this.userInfoRegion.classList.remove(\"invisible\");\n    }\n};\n","export function getActivityConfiguration() {\n    let activityConfig = {\n        userID: localStorage.getItem(\"userID\"),\n        classCode: localStorage.getItem(\"classCode\"),\n        database: localStorage.getItem(\"database\"),\n        homepage: localStorage.getItem(\"homepage\"),\n        activityKey: localStorage.getItem(\"currentActivity\"),\n        features: (localStorage.getItem(\"currentActivityFeatures\") || \"\")\n                  .split(\":\")\n                  .filter((item) => item !== \"\")\n    };\n    console.log(activityConfig);\n    return activityConfig;\n}","// abstract class - interface\nexport class Database {\n    constructor() {\n\n    }\n\n    setCredentials(classCode, userID) {\n        this.classCode = classCode;\n        this.userID = userID;\n    }\n\n    getUserData() {\n\n    }\n\n    getActivityData(activityKey, decodeJSON = true) {\n\n    }\n\n    setActivityData(activityKey, object) {\n\n    }\n\n    getRQData() {\n\n    }\n\n    getCurrHypoTask() {\n\n    }\n\n    getInitialHypoData() {\n\n    }\n\n    getFinalHypoData() {\n\n    }\n\n    saveValue(varName, value) {\n\n    }\n\n    saveJSONValue(varName, object) {\n\n    }\n\n    getBoolValue(varName) {\n\n    }\n\n    getIntValue(varName) {\n\n    }\n\n    getFloatValue(varName) {\n\n    }\n\n    getTextValue(varName) {\n\n    }\n\n    getJSONValue(varName) {\n\n    }\n\n};\n\n\n","\nimport { Database } from \"./database\";\n\n// NOTE: this API must use promises to be compatible with any db\n// we may be using, which may be either sync or async\nexport class LocalStorageDB extends Database {\n\n    constructor() {\n        super();\n    }\n\n    setCredentials(classCode, userID) {\n        super.setCredentials(classCode, userID);\n        // return Promise.all([\n        // this.saveValue(\"classCode\", classCode),\n        // this.saveValue(\"userID\", userID),\n        // ]).then(([result1, result2]) => { });\n    }\n\n    getUserData() {\n        console.count(\"getUserData() called\");\n        let data = {};\n        return Promise.all([\n            this.getTextValue(\"classCode\"),\n            this.getTextValue(\"userID\"),\n            this.getActivityData(\"rqted\"),\n            this.getCurrHypoTask(),\n            this.getIntialHypoData(),\n            this.getFinalHypoData()\n        ]).then(([ccRes, uidRes, rqRes, chtRes, ihRes, fhRes]) => {\n            data.classCode = ccRes;\n            data.userID = uidRes;\n            data.rqted = rqRes;\n            if (chtRes) {\n                data.currHypoTaskIdx = chtRes\n            }\n            if (ihRes) {\n                data.firstPrediction = ihRes.firstPrediction;\n                data.initialHypo = ihRes.initialHypo;\n            }\n            if (fhRes) {\n                data.secondPrediction = fhRes.secondPrediction;\n                data.finalHypo = fhRes.finalHypo;\n            }\n            return data;\n        });\n    }\n\n    getActivityData(activityKey, decodeJSON = true) {\n        return this.getJSONValue(activityKey)\n        .then((data) => {\n            if (data && !decodeJSON) {\n                return JSON.stringify(data);\n            } else {\n                return data;\n            }\n        });\n    }\n\n    setActivityData(activityKey, object) {\n        return this.saveJSONValue(activityKey, object);\n    }\n\n    getRQData() {\n        let retVal = null;\n        return this.getActivityData(\"rqted\")\n        .then((rqted) => {\n            // console.log(rqted);\n            if (rqted) {\n                retVal = rqted;\n            } else {\n                // if the rq isn't selected hard-code to crystal growth\n                retVal = {\n                    moduleState: {\n                        selectedArea: { index: 1 },\n                        selectedTopic: { index: 1 },\n                        selectedVariable: { index: 1 },\n                        selectedRQ: { index: 1 }\n                    }\n                };\n            }\n            // console.log(retVal);\n            return retVal;\n        })\n        .catch((err) => {\n            console.error(err);\n            return retVal;\n        });\n    }\n\n    getCurrHypoTask() {\n        return this.getIntValue(\"currHypoTaskIdx\")\n    }\n\n    getIntialHypoData() {\n        let data = {};\n        return this.getTextValue(\"firstPrediction\")\n            .then((pred1) => {\n                // console.log(`getInitialHypoData():firstPrediction ${pred1}`);\n                if (null !== pred1) {\n                    data.firstPrediction = pred1;\n                    return this.getJSONValue(\"initialHypo\");\n                } else {\n                    data.firstPrediction = null;\n                    return null;\n                }\n            })\n            .then((initHypo) => {\n                // console.log(`getInitialHypoData():initHypo ${initHypo}`);\n                data.initialHypo = initHypo;\n                return data;\n            })\n            .catch((err) => {\n                console.error(err);\n                return data;\n            });\n    }\n\n    getFinalHypoData() {\n        let data = {};\n        return this.getTextValue(\"secondPrediction\")\n            .then((pred2) => {\n                // console.log(`getFinalHypoData():secondPrediction ${pred2}`)\n                if (null !== pred2) {\n                    data.secondPrediction = pred2;\n                    return this.getJSONValue(\"finalHypo\");\n                } else {\n                    data.secondPrediction = null;\n                    return null\n                }\n            })\n            .then((finalHypo) => {\n                // console.log(`getFinalHypoData():finalHypo ${finalHypo}`);\n                data.finalHypo = finalHypo;\n                return data;\n            })\n            .catch((err) => {\n                console.error(err);\n                return data;\n            });\n    }\n\n    setValues(object, overwrite=false) {\n        // overwrite param is ignored, as it is specific to firestore\n        return new Promise((resolve, reject) => {\n            try {\n                for (let [key, value] of Object.items(object)) {\n                    localStorage.setItem(key, value);\n                }\n                resolve(true);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    saveValue(varName, value) {\n        return new Promise((resolve, reject) => {\n            try {\n                resolve(localStorage.setItem(varName, value));\n            } catch(err) {\n                reject(err);\n            }\n        })\n    }\n\n    saveJSONValue(varName, object) {\n        return new Promise((resolve, reject) => {\n            try {\n                let value = JSON.stringify(object);\n                resolve(localStorage.setItem(varName, value));\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getBoolValue(varName) {\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (undefined === value) {\n                    resolve(value);\n                }\n                if (\"true\" === value) {\n                    resolve(true);\n                } else {\n                    resolve(false);\n                }\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getIntValue(varName) {\n        let retVal;\n        return new Promise((resolve, reject) => {\n            try {\n               let value = localStorage.getItem(varName);\n                if (value) {\n                    retVal = parseInt(value, 10);\n                }\n                resolve(retVal);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getFloatValue(varName) {\n        let retVal;\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (value) {\n                    retVal = parseFloat(value);\n                }\n                resolve(retVal);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n\n    getTextValue(varName) {\n        let retVal;\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (value) {\n                    retVal = value;\n                }\n                resolve(value);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    };\n\n    getJSONValue(varName) {\n        return new Promise((resolve, reject) => {\n            try {\n                let value = localStorage.getItem(varName);\n                if (value) {\n                    value = JSON.parse(value);\n                }\n                resolve(value);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }\n};\n\n// let db = new Database(\"BOGUS_CLASS\", \"BOGUS_STUDENT\");\n\n","import { Database } from \"./database\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyD7zIk-8V20QqJNSs0cAV0uNL3qjeqLMdM\",\n    authDomain: \"isptutor.firebaseapp.com\",\n    projectId: \"isptutor\"\n};\n\nexport class FirestoreDB extends Database {\n\n    constructor() {\n        super();\n        firebase.initializeApp(firebaseConfig);\n        this.store = firebase.firestore();\n    }\n\n    setCredentials(classCode, userID) {\n        super.setCredentials(classCode, userID);\n        this.userRef = this.store.collection(this.classCode).doc(this.userID);\n    }\n\n    getUserData() {\n        // returns promise with 'doc' if it exists, null otherwise\n        return this.userRef.get()\n        .then((doc) => {\n            if (doc.exists) {\n                return doc.data;\n            } else {\n                return null;\n            }\n        });\n    }\n\n\n    getCurrHypoTask() {\n\n    }\n  \n    getActivityData(activityKey, decodeJSON=true) {\n        return this.getUserData()\n        .then((userData) => {\n            let data = userData[activityKey];\n            if (data && decodeJSON) {\n                return JSON.parse(data);\n            } else {\n                return data;\n            }\n        });\n    }\n\n    // getRQData() {\n    //     return this.getAppData(\"rqted\");\n    // }\n\n\n    // getInitialHypoData() {\n    //     return this.getAppData(\"initialHypo\")\n    //     .then((strData))\n    // }\n\n    // getFinalHypoData() {\n    //     return this.getAppData(\"finalHypo\")\n    // }\n\n    setValues(object, overwrite=false) {\n        // default to {merge: true} option for safety\n        return this.userRef.set(object, {merge: !overwrite});       \n    }\n\n    updateValues(object) {\n        return this.userRef.update(object);\n    }\n\n    deleteValue(varName) {\n        return this.userRef.update({\n            [varName]: firebase.firestore.FieldValue.delete()\n        });\n    }\n\n    // saveJSONValue(varName, value) {\n    //     return this.userRef.set({\n    //         [varName]: JSON.stringify(value)\n    //     });\n    // }\n\n    // getBoolValue(varName) {\n\n    // }\n\n    // getIntValue(varName) {\n\n    // }   \n    \n    // getFloatValue(varName) {\n\n    // }\n\n    // getTextValue(varName) {\n\n    // }\n\n    // getJSONValue(varName) {\n\n    // }\n};","import \"./index.css\";\n\n\nexport class SnackBar {\n    constructor(eleID) {\n        this.el = document.getElementById(eleID || \"snackbar\");\n    }\n\n    show(text) {\n        if (typeof(text) !== \"undefined\" && null !== text) {\n            this.el.innerHTML = text;\n            // Add the \"show\" class to DIV\n            // this.el.className = \"show\";\n            this.el.classList.add(\"show\");\n            // After 3 seconds, remove the show class from DIV\n            setTimeout(() => {\n                // snackbar.className = snackbar.className.replace(\"show\", \"\");\n                this.el.classList.remove(\"show\");\n            }, 3000);\n        }\n    }\n}\n","import { Scene } from \"@isptutorproject/scene-app-base\";\n\nexport class DiTestScene extends Scene {\n    constructor(app, sceneInfo) {\n        super(app, sceneInfo);\n        this.customActions = {\n            showBtns: this.showBtns,\n            hideBtns: this.hideBtns,\n        };\n        this.btnNames = {\n            prev: this.app.prevBtn,\n            next: this.app.nextBtn\n        };\n    }\n\n    performCustomEnterSceneActions() {\n        for (let action of this.customEnterActions) {\n            let name = action.name;\n            let args = action.args;\n            if (this.customActions.hasOwnProperty(name)) {\n                this[name](args);\n            }\n        }\n    }\n\n    defaultEnterSceneActions() {\n        super.defaultEnterSceneActions();\n        // if (process.env.NODE_ENV === \"production\") {\n        //     this.app.hide(this.app.prevBtn);\n        // } else {\n        this.app.show(this.app.prevBtn);\n        // }\n        this.app.show(this.app.nextBtn);\n    }\n\n}\n","export class Scene {\n    constructor(app, sceneInfo) {\n        console.debug(`\\tInitializing Scene: ${sceneInfo.id}`);\n        this.app = app;\n        // copy all sceneInfo to 'this'\n        for (let [k, v] of Object.entries(sceneInfo)) {\n            this[k] = v;\n        }\n        this.el = document.getElementById(this.id);\n        // bind event handler\n        this.handleFollowEdgeButton = this.handleFollowEdgeButton.bind(this);\n    }\n\n    showBtns(btnNames) {\n        for (let btnName of btnNames) {\n            if (this.btnNames.hasOwnProperty(btnName)) {\n                this.app.show(this.btnNames[btnName]);\n            }\n        }\n    }\n\n    hideBtns(btnNames) {\n        for (let btnName of btnNames) {\n            if (this.btnNames.hasOwnProperty(btnName)) {\n                this.app.hide(this.btnNames[btnName]);\n            }\n        }\n    }\n\n\n    handleFollowEdgeButton(e) {\n        e.preventDefault();\n        let edgeName = e.target.dataset.edge;\n        this.app.followEdge(edgeName);\n    }\n\n    getFollowEdgeElements() {\n        return this.el.getElementsByClassName(\"follow-edge\");\n    }\n\n    setupFollowEdgeEventHandlers() {\n        for (let el of this.getFollowEdgeElements()) {\n            el.addEventListener(\n                \"click\", this.handleFollowEdgeButton, { once: true }\n            );\n        }\n    }\n\n    restoreState(value) {\n        if (typeof (value) !== \"undefined\") {\n            console.debug(`\\tRestoring Scene State for: ${this.id} `);\n            return true;\n        }\n        return false;\n    }\n\n    _isBogus() {\n        return this.id === \"N/A\" || this.sceneType === \"bogus\";\n    }\n\n    handlePrevButton() {\n        this.app.followEdge(\"prev\");\n    }\n\n    handleNextButton() {\n        this.app.followEdge(\"next\");\n    }\n\n    hasForm() {\n        return false;\n    }\n\n    formChanged() {\n        return false;\n    }\n\n    pre_enter() {\n\n    }\n\n    enter() {\n        if (this._isBogus()) {\n            return;\n        }\n        console.debug(`Entering Scene: ${this.id}`);\n        console.debug(\"\\tUpdating state.currentScene\");\n        this.app.state.currentScene = this.id;\n        this.defaultEnterSceneActions();\n        if (this.customEnterActions.length) {\n            this.performCustomEnterSceneActions();\n        }\n    }\n\n    post_enter() {\n\n    }\n\n    pre_exit() {\n\n    }\n\n    exit() {\n        if (this._isBogus()) {\n            return;\n        }\n        console.debug(`Exiting Scene: ${this.id}`);\n        this.defaultExitSceneActions();\n        if (this.customExitActions.length) {\n            this.performCustomExitSceneActions();\n        }\n    }\n\n    post_exit() {\n\n    }\n\n    defaultEnterSceneActions() {\n        this.el.classList.add(\"active\");\n        this.setupFollowEdgeEventHandlers();\n    }\n\n    defaultExitSceneActions() {\n        this.el.classList.remove(\"active\");\n    }\n\n    performCustomEnterSceneActions() {\n        console.warn(\"Unimplemented Method: performCustomEnterSceneActions\");\n    }\n\n    performCustomExitSceneActions() {\n        console.warn(\"Unimplemented Method: performCustomExitSceneActions\");\n    }\n}\n","export class RadioButtonForm {\n    constructor(app, formInfo, eleId) {\n        this.handleChange = this.handleChange.bind(this);\n        this.app = app;\n        this.formInfo = formInfo;\n        this.form = document.getElementById(eleId);\n        this.radios = this.form.querySelectorAll('input[type=\"radio\"]');\n        this.changed = false;\n    }\n\n    isValid() {\n        const validity = this.form.checkValidity();\n        // console.log(\"form is valid:\", validity);\n        return validity;\n    }\n\n    handleChange(e) {\n        // set form to dirty state so it will get saved later on\n        this.changed = true;\n        if (this.isValid()) {\n            this.app.enable(this.app.nextBtn);\n        }\n    }\n\n    setupEventHandlers() {\n        for (let rb of this.radios) {\n            rb.addEventListener('change', this.handleChange);\n        }\n    }\n\n    teardownEventHandlers() {\n        for (let rb of this.radios) {\n            rb.removeEventListener('change', this.handleChange);\n        }\n    }\n\n\n    getCorrectness() {\n        let sfi = this.formInfo;\n        let selectedAnswer = this.form.querySelector(\n            'input[type=\"radio\"]:checked'\n        )\n        let val = selectedAnswer.value.trim();\n        // let ansText = selectedAnswer.labels[0].innerText;\n        let correctAnswer = sfi.correctAnswer;\n        let isCorrect;\n\n        if (\"N/A\" === correctAnswer) {\n            isCorrect = null;\n        } else if (correctAnswer === val) {\n            isCorrect = true;\n        } else {\n            isCorrect = false;\n        }\n        return isCorrect;\n    }\n\n    getFeedback() {\n        let isCorrect = this.getCorrectness();\n        let sfi = this.formInfo;\n        // console.log(isCorrect, sfi);\n        let fbText, fbClassName, fbMsg;\n        switch(isCorrect) {\n            case true:\n                fbText = sfi.posFb;\n                fbClassName = \"pos-feedback\";\n                break;\n            case false:\n                fbText = sfi.negFb;\n                fbClassName = \"neg-feedback\";\n                break;\n            default:\n                fbText = sfi.ntlFb;\n                fbClassName = \"ntl-feedback\";\n        }\n        if (typeof(fbText) === \"undefined\") {\n            if (typeof(sfi.ntlFb) !== \"undefined\") {\n                fbText = sfi.ntlFb;\n            }\n        }\n        if (typeof (fbText) !== \"undefined\") {\n            fbMsg = `<span class=\"${fbClassName}\">${fbText}</span>`;\n        }\n        return fbMsg;\n    }\n\n    getData() {\n        let sfi = this.formInfo;\n        let isCorrect = this.getCorrectness();\n        let selectedAnswer = this.form.querySelector(\n            'input[type=\"radio\"]:checked'\n        );\n        let val = selectedAnswer.value.trim();\n        let lbl = selectedAnswer.labels[0].innerText;\n        let formData = {\n            questionType: sfi.type,\n            questionText: sfi.text,\n            selectedEleId: selectedAnswer.id,\n            selectedValue: val,\n            selectedLabel: lbl,\n            isCorrect: isCorrect,\n            timestamp: Date.now()\n        }\n        // set form to non-dirty state, so we don't resubmit unless they\n        // change again\n        this.changed = false;\n        return formData;\n    }\n\n}","export class TextareaForm {\n    constructor(app, formInfo, eleId) {\n        this.handleChange = this.handleChange.bind(this);\n        this.app = app;\n        this.formInfo = formInfo;\n        this.form = document.getElementById(eleId);\n        console.log(this.form);\n        this.textarea = this.form.querySelector('.form-control');\n        this.changed = false;\n    }\n\n    isValid() {\n        const validity = this.form.checkValidity();\n        // console.log(\"form is valid:\", validity);\n        return validity;\n    }\n\n    handleChange(e) {\n        // set form to dirty state so it will get saved later on\n        if (this.textarea.value.trim() != \"\") {\n            this.changed = true;\n            // console.log(this.getData());\n            if (this.isValid()) {\n                this.app.enable(this.app.nextBtn);\n            }\n        }\n    }\n\n    setupEventHandlers() {\n        // for (let rb of this.radios) {\n        //     rb.addEventListener('change', this.handleChange);\n        // }\n        this.textarea.addEventListener(\"input\", this.handleChange);\n    }\n\n    teardownEventHandlers() {\n        // for (let rb of this.radios) {\n        //     rb.removeEventListener('change', this.handleChange);\n        // }\n        this.textarea.removeEventListener(\"input\", this.handleChange);\n    }\n\n\n    getCorrectness() {\n        // let sfi = this.formInfo;\n        // let selectedAnswer = this.form.querySelector(\n        //     'input[type=\"radio\"]:checked'\n        // )\n        // let val = selectedAnswer.value.trim();\n        // // let ansText = selectedAnswer.labels[0].innerText;\n        // let correctAnswer = sfi.correctAnswer;\n        // let isCorrect;\n\n        // if (\"N/A\" === correctAnswer) {\n        //     isCorrect = null;\n        // } else if (correctAnswer === val) {\n        //     isCorrect = true;\n        // } else {\n        //     isCorrect = false;\n        // }\n        // return isCorrect;\n        return null;\n    }\n\n    getFeedback() {\n        // let isCorrect = this.getCorrectness();\n        let sfi = this.formInfo;\n        // // console.log(isCorrect, sfi);\n        let fbText, fbClassName, fbMsg;\n        // switch (isCorrect) {\n        //     case true:\n        //         fbText = sfi.posFb;\n        //         fbClassName = \"pos-feedback\";\n        //         break;\n        //     case false:\n        //         fbText = sfi.negFb;\n        //         fbClassName = \"neg-feedback\";\n        //         break;\n        //     default:\n        //         fbText = sfi.ntlFb;\n        //         fbClassName = \"ntl-feedback\";\n        // }\n        // if (typeof (fbText) === \"undefined\") {\n        if (typeof (sfi.ntlFb) !== \"undefined\") {\n            fbText = sfi.ntlFb;\n            fbClassName = \"ntl-feedback\";\n        }\n        // }\n        if (typeof (fbText) !== \"undefined\") {\n            fbMsg = `<span class=\"${fbClassName}\">${fbText}</span>`;\n        }\n        return fbMsg;\n    }\n\n    getData() {\n        let sfi = this.formInfo;\n        let isCorrect = this.getCorrectness();\n        // let selectedAnswer = this.form.querySelector(\n        //     'input[type=\"radio\"]:checked'\n        // );\n        // let val = selectedAnswer.value.trim();\n        // let lbl = selectedAnswer.labels[0].innerText;\n        let answer = this.textarea.value.trim();\n        let formData = {\n            questionType: sfi.type,\n            questionText: sfi.text,\n            // selectedEleId: selectedAnswer.id,\n            // selectedValue: val,\n            // selectedLabel: lbl,\n            answer: answer,\n            isCorrect: isCorrect,\n            timestamp: Date.now()\n        }\n        // set form to non-dirty state, so we don't resubmit unless they\n        // change again\n        this.changed = false;\n        return formData;\n    }\n\n    // getFormData() {\n\n    // }\n\n    // handleFormSubmit(e) {\n    //     e.preventDefault();\n\n    //     if (this.form.checkValidity()) {\n\n    //         let fbText;\n    //         let fbClassName;\n\n    //         if (\"n/a\" === correctAnswer) {\n    //             isCorrect = null;\n    //             fbText = sfi.ntlFb;\n    //             fbClassName = \"ntl-feedback\";\n    //         } else if (correctAnswer === val) {\n    //             isCorrect = true;\n    //             fbText = sfi.posFb;\n    //             fbClassName = \"pos-feedback\";\n    //         } else {\n    //             isCorrect = false;\n    //             fbText = sfi.negFb;\n    //             fbClassName = 'neg-feedback';\n    //         }\n\n    //         if (!fbText) {\n    //             fbText = sfi.ntlFb;\n    //             fbClassName = 'ntl-feedback';\n    //         }\n\n    //         this.app.showFeedback(fbMsg);\n    //         // what we want to store in firestore\n    // }\n    //         console.log(log);\n\n    //     } else {\n    //         let fbMsg = `<span class=\"text-danger\">Please select an option</span>`;\n    //         this.app.showFeedback(fbMsg);\n    //     }\n    // }\n\n}","import { DiTestScene } from \"./testScene\";\n\nimport { RadioButtonForm } from \"@isptutorproject/scene-app-base/radio-button-form\";\nimport { TextareaForm } from \"@isptutorproject/scene-app-base/textarea-form\";\n\nconst FIRST_TRANSITION = 0;\nconst LAST_TRANSITION = 2;\n\nexport class DiTestResultsScene extends DiTestScene {\n    constructor(app, sceneInfo) {\n        super(app, sceneInfo);\n        this.q1Answer = null;\n        // default to the first transition\n        this.currentTransition = FIRST_TRANSITION;\n        this.currentTransitionStateSaver = null;\n        this.currentState = null;\n\n        this.saveQ1State = this.saveQ1State.bind(this);\n        this.saveQ2State = this.saveQ2State.bind(this);\n        this.saveQ3State = this.saveQ3State.bind(this);\n\n        this.handleShowLeftMean    = this.handleShowLeftMean.bind(this);\n        this.handleShowRightMean   = this.handleShowRightMean.bind(this);\n        this.handleShowSortedTable = this.handleShowSortedTable.bind(this);\n\n        let side = \"left\"\n        this.leftMeanBtn   = document.getElementById(`${this.id}_reveal_${side}_mean`);\n        this.leftMeanValue = document.getElementById(`${this.id}_${side}_mean`);\n        side = \"right\";\n        this.rightMeanBtn   = document.getElementById(`${this.id}_reveal_${side}_mean`);\n        this.rightMeanValue = document.getElementById(`${this.id}_${side}_mean`);\n        this.showSortedTableBtn = document.getElementById(`${this.id}_show_sorted_table`);\n        this.sortedTableText    = document.getElementById(`${this.id}_sorted_text`);\n        this.sortedImg   = document.getElementById(`${this.id}_sorted`);\n        this.unsortedImg = document.getElementById(`${this.id}_unsorted`);\n\n        this.q2TextArea = document.getElementById(`${this.id}_q2_answer`);\n        this.currentForm = null;\n        this.q1Form = new RadioButtonForm(\n            this.app, sceneInfo.questions.q1, `${this.id}_q1_form`\n        );\n        this.q2Form = new TextareaForm(\n            this.app, sceneInfo.questions.q2, `${this.id}_q2_form`\n        );\n        this.q3Form = new RadioButtonForm(\n            this.app, sceneInfo.questions.q3, `${this.id}_q3_form`\n        );\n        this.forms = [\n            this.q1Form,\n            this.q2Form,\n            this.q3Form\n        ];\n        // this.q2TextArea = this.q2Form.querySelector(\".form-control\");\n        this.q2Text = document.getElementById(`${this.id}_q2_text`);\n        this.q3Text = document.getElementById(`${this.id}_q3_text`);\n\n        // this.handleFormChange = this.handleFormChange.bind(this);\n        this.setupEventHandlers();\n    }\n\n    restoreState(sceneState) {\n        super.restoreState(sceneState);\n        if (sceneState) {\n            console.log(\"TestResultsScene::restoreState()\");\n            this.currentState = sceneState;\n\n            if (sceneState.currentTransition) {\n                this.currentTransition = sceneState.currentTransition;\n            }\n            if (sceneState.q1Selection) {\n                let el = document.getElementById(sceneState.q1Selection);\n                el.checked = true;\n                // something is very wrong if we don't have both q1Selection\n                // and a1Answer stored\n                this.q1Answer = sceneState.q1Answer;\n                this.updateQ2AndQ3Text();\n            }\n            if (sceneState.q2Answer) {\n                this.q2TextArea.value = sceneState.q2Answer;\n            }\n            if (sceneState.q3Selection) {\n                let el = document.getElementById(sceneState.q3Selection);\n                el.checked = true;\n            }\n            // fixme, these are the event handlers, which should be\n            // updating sceneState when clicked\n            if (sceneState.leftMeanShown) {\n                this.showMean(\"left\");\n            }\n            if (sceneState.rightMeanShown) {\n                this.showMean(\"right\");\n            }\n            if (sceneState.sortedTableShown) {\n                this.showSortedTable();\n            }\n        }\n    }\n\n    updateSceneState(diff) {\n        if (null === this.currentState) {\n            this.currentState = {};\n        }\n        this.currentState = Object.assign(this.currentState, diff);\n        // this.app.state.sceneState[this.id] = this.currentState;\n        console.log(this.currentState);\n    }\n\n    showMean(which) {\n        if (\"left\" === which) {\n            this.app.hide(this.leftMeanBtn);\n            this.app.show(this.leftMeanValue);\n        } else if (\"right\" === which) {\n            this.app.hide(this.rightMeanBtn);\n            this.app.show(this.rightMeanValue);\n        } else {\n            console.error(`showMean(${which}) is neither 'left' nor 'right'`);\n        }\n    }\n\n    showSortedTable() {\n        this.app.hide(this.showSortedTableBtn);\n        this.app.hide(this.unsortedImg);\n        this.app.show(this.sortedImg);\n        this.app.show(this.sortedTableText);\n    }\n\n    handleShowLeftMean(e) {\n        this.showMean(\"left\");\n        this.updateSceneState({\"leftMeanShown\": true});\n    }\n\n    handleShowRightMean(e) {\n        this.showMean(\"right\");\n        this.updateSceneState({\"rightMeanShown\": true});\n    }\n\n    handleShowSortedTable(e) {\n        this.showSortedTable();\n        this.updateSceneState({\"sortedTableShown\": true});\n    }\n\n    hideAllForms() {\n        for (let f of this.forms) {\n            this.app.hide(f.form);\n        }\n    }\n\n    handlePrevButton() {\n        console.log(\"TestResultsScene::handlePrevButton()\");\n        if (this.currentForm.changed) {\n            this.currentTransitionStateSaver(this.currentForm.getData());\n        }\n        if (FIRST_TRANSITION === this.currentTransition) {\n            console.log(\"at first transition. go to prev scene\");\n            this.app.followEdge(\"prev\");\n        } else {\n            this.currentTransition--;\n            this.handleTransition();\n        }\n    }\n\n    handleNextButton() {\n        console.log(\"TestResultsScene::handleNextButton()\");\n        if (this.currentForm.changed) {\n            this.currentTransitionStateSaver(this.currentForm.getData());\n        }\n        if (LAST_TRANSITION === this.currentTransition) {\n            console.log(\"at last transition. go to next scene\");\n            this.app.followEdge(\"next\");\n        } else {\n            this.currentTransition++;\n            this.handleTransition();\n        }\n\n    }\n\n    hasForm() {\n        return true;\n    }\n\n    setupEventHandlers() {\n        this.leftMeanBtn.addEventListener(\n            \"click\", this.handleShowLeftMean, {once: true}\n        );\n        this.rightMeanBtn.addEventListener(\n            \"click\", this.handleShowRightMean, { once: true }\n        );\n        this.showSortedTableBtn.addEventListener(\n            \"click\", this.handleShowSortedTable, { once: true }\n        );\n    }\n\n    updateQ2AndQ3Text() {\n        let phRepl = `<span class=\"q1-answer\">${this.q1Answer}</span>`;\n        this.questions.q2.text = this.questions.q2.text.replace(\n            \"PLACEHOLDER\", phRepl\n        );\n        this.questions.q3.text = this.questions.q3.text.replace(\n            \"PLACEHOLDER\", phRepl\n        );\n        this.q2Text.innerHTML = this.questions.q2.text;\n        this.q3Text.innerHTML = this.questions.q3.text;\n    }\n\n    saveQ1State(data) {\n        console.log(\"saveQ1State()\");\n        this.q1Answer = data.selectedValue;\n        this.updateSceneState({\n            \"q1Selection\": data.selectedEleId,\n            \"q1Answer\": this.q1Answer,\n        });\n        this.updateQ2AndQ3Text();\n        this.submitQuestion(\"q1\", data);\n    }\n\n    saveQ2State(data) {\n        console.log(\"saveQ2State()\");\n        this.updateSceneState({\n            q2Answer: data.answer\n        });\n        data.questionText = data.questionText\n            .replace('<span class=\"q1-answer\">', '')\n            .replace('</span>', '');\n        this.submitQuestion(\"q2\", data);\n    }\n\n    saveQ3State(data) {\n        console.log(\"saveQ3State()\");\n        this.updateSceneState({\n            q3Selection: data.selectedEleId\n        });\n        data.questionText = data.questionText\n            .replace('<span class=\"q1-answer\">', '')\n            .replace('</span>', '');\n        this.submitQuestion(\"q3\", data);\n    }\n\n\n    submitQuestion(qNum, data) {\n        let logData = Object.assign(\n            {\n                action_type: \"SUBMIT_ANSWER\",\n                questionId: `${this.app.activityKey}.${this.id}.${qNum}`\n            },\n            data\n        );\n        console.log(logData);\n    }\n\n    defaultEnterSceneActions() {\n        super.defaultEnterSceneActions();\n        this.app.hide(this.leftMeanValue);\n        this.app.hide(this.rightMeanValue);\n        this.app.hide(this.sortedTableText);\n        this.app.show(this.leftMeanBtn);\n        this.app.show(this.rightMeanBtn);\n        this.app.show(this.showSortedTableBtn);\n\n\n        // if (process.env.NODE_ENV === \"production\") {\n        //     this.app.disable(this.app.nextBtn);\n        // } else {\n        this.app.show(this.app.prevBtn);\n        this.app.show(this.app.nextBtn);\n        this.app.enable(this.app.prevBtn);\n        this.app.enable(this.app.nextBtn);\n        // }\n        this.q1Form.setupEventHandlers();\n        this.q2Form.setupEventHandlers();\n        this.q3Form.setupEventHandlers();\n    }\n\n    handleTransition() {\n        console.log(\"TestResultsScene.handleTransition()\");\n        console.log(this.currentTransition);\n        this.hideAllForms();\n        this.currentForm = this.forms[this.currentTransition];\n        this.app.show(this.currentForm.form);\n        if (!this.currentForm.isValid()) {\n            this.app.disable(this.app.nextBtn);\n        } else {\n            this.app.enable(this.app.nextBtn);\n        }\n        switch (this.currentTransition) {\n            case 0:\n                this.currentTransitionStateSaver = this.saveQ1State;\n                break;\n            case 1:\n                this.currentTransitionStateSaver = this.saveQ2State;\n                this.q2TextArea.focus();\n                break;\n            case 2:\n                this.currentTransitionStateSaver = this.saveQ3State;\n                break;\n            default:\n                console.error(`invalid transition: ${this.currentTransition}`);\n        }\n    }\n\n    post_enter() {\n        console.log(\"TestResultsScene.post_enter()\");\n        console.log(this.forms);\n        this.handleTransition();\n        if (null !== this.currentState) {\n            self.restoreState(this.currentState);\n        }\n    }\n\n    // teardownAllFormEventHandlers() {\n    //     for (let f of this.forms) {\n    //         f.teardownEventHandlers();\n    //     }\n    // }\n\n}\n","\nimport \"./index.scss\";\n\nimport { NavBar } from \"@isptutorproject/navbar\";\n\nimport { SceneBasedApp } from \"@isptutorproject/scene-app-base\";\nimport { DiTestScene, DiTestResultsScene } from \"./scenes\";\n\nexport class DiTestApp extends SceneBasedApp{\n    // constructor(appData, activityConfig, defaultInitialState) {\n    //     super(appData, activityConfig, defaultInitialState);\n    // }\n\n    createScene(sceneInfo) {\n        let scene;\n        switch(sceneInfo.sceneType) {\n            case \"carResults\":\n            case \"libraryResults\":\n            case \"memoryResults\":\n            case \"rocketsResults\":\n                scene = new DiTestResultsScene(this, sceneInfo);\n                break;\n            default:\n                scene = new DiTestScene(this, sceneInfo);\n\n        }\n        return scene;\n    }\n\n    // logStudentAnswer(questionName, answer) {\n    //     let question = this.currentScene.questions[questionName];\n    //     let isCorrect = \"N/A\";\n    //     if (question.hasOwnProperty(\"correctAnswer\")) {\n    //         isCorrect = (answer === question.correctAnswer)\n    //     }\n    //     let qid = `${this.currentScene.id}.${questionName}`;\n    //     if (\"\" !== this.testName) {\n    //         qid = `${this.testName}.${qid}`;\n    //     }\n    //     let data = {\n    //         action: \"SUBMIT_ANSWER\",\n    //         questionId: qid,\n    //         questionText: question.text,\n    //         answer: answer,\n    //         isCorrect: isCorrect,\n    //         timestamp: new Date().toLocaleString()\n    //     }\n    //     console.log(data);\n    // }\n\n}","import { getDBConnection } from \"@isptutorproject/isp-database\";\nimport { SnackBar} from \"@isptutorproject/snackbar\";\n\nexport class SceneBasedApp {\n    constructor(appData, activityConfig, defaultInitialState) {\n        this.sceneData = appData.scenes;\n        this.activityConfig = activityConfig;\n        this.db = getDBConnection(activityConfig.database);\n        this.db.setCredentials(activityConfig.classCode, activityConfig.userID);\n        this.activityKey = activityConfig.activityKey;\n        this.defaultState = defaultInitialState;\n\n        this.snackbar = new SnackBar();\n        this.homePageBtn = null;\n        let homePageBtn  = document.getElementById(\"go_home_page\");\n        this.nextBtn = document.getElementById(\"next_btn\");\n        this.prevBtn = document.getElementById(\"prev_btn\");\n        this.sceneIdRegion = document.getElementById(\"scene_id_region\");\n        if (homePageBtn) {\n            this.homePageBtn = homePageBtn;\n        }\n        this.handleGoHomePage = this.handleGoHomePage.bind(this);\n        this.handleNext = this.handleNext.bind(this);\n        this.handlePrev = this.handlePrev.bind(this);\n        if (this.homePageBtn) {\n            this.homePageBtn.addEventListener(\"click\", this.handleGoHomePage);\n        }\n        this.nextBtn.addEventListener(\"click\", this.handleNext);\n        this.prevBtn.addEventListener(\"click\", this.handlePrev);\n\n        this.state = {};\n        this.scenes = {};\n        this.startScene = \"start\";\n        this.currentScene = null;\n        this.prevScene = null;\n        // is this needed???\n        this.bogusSceneInfo = {\n            id: \"N/A\",\n            sceneType: \"bogus\"\n        };\n        window.app = this;\n    }\n\n\n    // setSnackbar(snackbar) {\n    //     this.snackbar = snackbar;\n    // }\n\n    showFeedback(feedback) {\n        this.snackbar.show(feedback);\n    }\n\n    handleGoHomePage(event) {\n        event.preventDefault();\n        window.location.href = this.activityConfig.homepage\n    }\n\n    handlePrev(event) {\n        event.preventDefault();\n        this.currentScene.handlePrevButton();\n        this.saveAppState();\n    }\n\n    handleNext(event) {\n        event.preventDefault();\n        this.currentScene.handleNextButton();\n        this.saveAppState();\n    }\n\n    setStartScene(sceneId) {\n        console.debug(\"setStartScene()\", sceneId);\n        this.startScene = sceneId;\n    }\n\n    start() {\n        console.log(\"starting\");\n        this.getAppState()\n            .then((state) => {\n                if (null === state) {\n                    console.log(\"no activity data in db. using initial data\")\n                    state = this.defaultState;\n                }\n                this.state = state;\n                return;\n            })\n            .then(() => {\n                console.log(\"Initializing Scenes\");\n                for (let section of document.querySelectorAll(\"section.scene\")) {\n                    let sceneId = section.id;\n                    // console.log(`creating scene for ${sceneId}`);\n                    let sceneObj = this.createScene(this.sceneData[sceneId]);\n                    // console.log(sceneObj);\n                    this.scenes[sceneId] = sceneObj;\n                }\n                return;\n            })\n            .then(() => {\n                console.log(this.state);\n                console.log(this.state.sceneState);\n                console.log(\"Restoring App State\")\n                for (let section of document.querySelectorAll(\"section.scene\")) {\n                    let sceneId = section.id;\n                    let sceneState = this.state.sceneState[sceneId];\n                    this.scenes[sceneId].restoreState(sceneState);\n                }\n                if (this.state.currentScene) {\n                    console.log(\"Restoring Current Scene\");\n                    this.currentScene = this.lookupScene(this.state.currentScene);\n                }\n                return;\n            })\n            .then(() => {\n                // console.debug(this.sceneData);\n                // console.log(this.scenes);\n            })\n            .then(() => {\n                this.gotoStartScene();\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n    }\n\n    getAppState() {\n        console.debug(\"Loading App State\");\n        return this.db.getActivityData(this.activityKey);\n    }\n\n    saveAppState() {\n        console.debug(\"Saving App State\");\n        return this.db.setActivityData(this.activityKey, this.state);\n    }\n\n    createScene(sceneInfo) {\n        // you'll want to override this to do anything useful\n        // console.debug(\"createScene()\", sceneInfo, sceneState);\n        return new Scene(this, sceneInfo);\n    }\n\n    switchToScene(scene) {\n        this.logSceneChange(scene);\n        this.gotoScene(scene);\n    }\n\n    gotoScene(scene) {\n        this.prevScene = this.currentScene;\n        if (this.prevScene) {\n            this.prevScene.pre_exit();\n            this.prevScene.exit();\n            this.prevScene.post_exit();\n        }\n        this.currentScene = scene;\n        this.currentScene.pre_enter();\n        this.currentScene.enter();\n        this.currentScene.post_enter();\n        // delete this.prevScene;\n        this.displaySceneId();\n    }\n\n    displaySceneId() {\n        if (process.env.NODE_ENV === \"development\") {\n            this.sceneIdRegion.innerHTML = this.currentScene.id;\n        }\n    }\n\n    lookupScene(sceneId) {\n        let scene = this.scenes[sceneId];\n        if (!scene) {\n            console.error(`ERROR: no such scene ${sceneId}`);\n        }\n        return scene;\n    }\n\n    followEdge(edgeName) {\n        let newSceneId = this.currentScene.edges[edgeName];\n        let newScene = this.lookupScene(newSceneId);\n        this.switchToScene(newScene);\n    }\n\n    logSceneChange(scene) {\n        let data = {\n            action: \"ENTER_SCENE\",\n            from: this.currentScene.id,\n            to: scene.id,\n            timestamp: Date.now()\n        };\n        this.state.events.push(data);\n        console.debug(\"Updating state.events\");\n    }\n\n\n    gotoStartScene() {\n        // bypasses switchToScene() and thus logSceneChange()\n        // this.currentScene = null;\n        let startScene = this.currentScene;\n        if (!startScene) {\n            startScene = this.lookupScene(this.startScene);\n        }\n        this.gotoScene(startScene);\n    }\n\n\n    hide(el) {\n        if (el) { el.classList.add(\"hidden\"); }\n    }\n\n    show(el) {\n        if (el) { el.classList.remove(\"hidden\"); }\n    }\n\n    makeInvisible(el) {\n        if (el) {\n            el.classList.add(\"invisible\");\n        }\n    }\n\n    makeVisible(el) {\n        if (el) {\n            el.classList.remove(\"invisible\");\n        }\n    }\n\n    disable(el) {\n        if (el) {\n            // console.log(\"disabling:\", el);\n            el.classList.add(\"disabled\");\n        } else {\n            // console.log(\"not disabling non-existinant element:\", el);\n        }\n    }\n\n    enable(el) {\n        if (el) {\n            // console.log(\"disabling:\", el);\n            el.classList.remove(\"disabled\");\n        } else {\n            // console.log(\"not disabling non-existinant element:\", el);\n        }\n    }\n}\n","import { LocalStorageDB } from \"./localStorageDB\";\nimport { FirestoreDB } from \"./firestoreDB\";\n\nexport function getDBConnection(dbType) {\n    let db;\n    switch(dbType) {\n        case \"firestore\":\n            db = new FirestoreDB();\n            break;\n        default:\n            db = new LocalStorageDB();\n    }\n    return db; \n}\n","import { DiTestApp } from \"./index\";\nimport { NavBar } from \"@isptutorproject/navbar\";\n\nimport { getActivityConfiguration } from \"@isptutorproject/activity-config\";\n\n\nconst DEFAULT_APP_INITIAL_STATE = {\n    events: [],\n    // mapping of sceneIDs -> scene-type specific data\n    sceneState: {},\n    currentScene: \"start\"\n};\n\n\nlet activityConfig = getActivityConfiguration();\nconst activityData = require(\"../data/diPreTest.json\");\n\nlet navbar = new NavBar();\nnavbar.displayActivityTitle(\"Data Interpretation Pre-Test\");\nnavbar.displayUser(activityConfig.userID);\n\n// console.log(activityConfig);\n\nlet app = new DiTestApp(\n    activityData, activityConfig, DEFAULT_APP_INITIAL_STATE\n);\nif (process.env.NODE_ENV === \"development\") {\n    app.setStartScene(\"start\");\n}\napp.start()\n\n"],"sourceRoot":""}